{"ast":null,"code":"var _jsxFileName = \"C:\\\\taff\\\\elearningUI\\\\src\\\\pages\\\\questions\\\\index.jsx\",\n  _s = $RefreshSig$();\n// import React from 'react'\n// import Header from '../../composants/Header'\n// import HeaderContent from '../../composants/HeaderContent'\n// import Footer from '../../composants/Footer'\n// import './QuestionCSS.css';\n\n// const QuestionReponseChrono = () => {\n//     return (\n//         <>\n//             <Header />\n//             <HeaderContent />\n//             <div className='containeur'>\n//                 <h1 className='containeur'>TEST D'EVALUATION DES LEADERS</h1>\n//                 <h3 className=''>Repondre aux questions pour valider l'examain</h3>\n//             </div>\n\n//             <Footer />\n//         </>\n//     )\n// }\n\n// export default QuestionReponseChrono\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './QuestionCSS.css'; // Importer le fichier CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([{\n    texte: \"Quelle est la capitale de la France ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }\n  // ... autres questions\n  ]);\n  const [answers, setAnswers] = useState([]);\n  const [remainingTimes, setRemainingTimes] = useState(questions.map(() => 60) // 60 secondes par défaut pour chaque question\n  );\n  const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n  const questionRefs = useRef(Array(questions.length).fill(null));\n  useEffect(() => {\n    const intervals = questions.map((_, index) => {\n      return setInterval(() => {\n        if (remainingTimes[index] > 0 && isTimerActive[index]) {\n          setRemainingTimes(prevRemainingTimes => {\n            const newRemainingTimes = [...prevRemainingTimes];\n            newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n            return newRemainingTimes;\n          });\n        } else if (remainingTimes[index] === 0) {\n          // Délai écoulé\n          alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n          setIsTimerActive(prevIsTimerActive => {\n            const newIsTimerActive = [...prevIsTimerActive];\n            newIsTimerActive[index] = false;\n            return newIsTimerActive;\n          });\n        }\n      }, 1000);\n    });\n    return () => intervals.forEach(interval => clearInterval(interval));\n  }, [remainingTimes, isTimerActive]);\n  const handleStartTimer = questionIndex => {\n    setIsTimerActive(prevIsTimerActive => {\n      const newIsTimerActive = [...prevIsTimerActive];\n      newIsTimerActive[questionIndex] = true;\n      return newIsTimerActive;\n    });\n    questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\n  };\n  const handleSubmit = (e, questionIndex) => {\n    e.preventDefault();\n    const answer = e.target.answer.value;\n\n    // Envoyer la réponse au serveur ou l'enregistrer localement\n\n    // Mettre à jour la liste des réponses\n    setAnswers([...answers, {\n      questionIndex,\n      answer\n    }]);\n\n    // Réinitialiser le chronomètre\n    setRemainingTimes(prevRemainingTimes => {\n      const newRemainingTimes = [...prevRemainingTimes];\n      newRemainingTimes[questionIndex] = 60;\n      return newRemainingTimes;\n    });\n\n    // Vider le champ de réponse\n    e.target.answer.value = '';\n    alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n    setIsTimerActive(prevIsTimerActive => {\n      const newIsTimerActive = [...prevIsTimerActive];\n      newIsTimerActive[questionIndex] = false;\n      return newIsTimerActive;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Formulaire de r\\xE9ponses aux questions ouvertes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.texte\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"time-remaining\",\n        children: [\"Temps restant : \", remainingTimes[index], \" secondes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStartTimer(index),\n        className: \"start-button\",\n        children: \"D\\xE9marrer le chronom\\xE8tre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this), isTimerActive[index] && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleSubmit(e, index),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"answer\",\n          children: \"Votre r\\xE9ponse : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"answer\",\n          name: \"answer\",\n          ref: questionRefs.current[index],\n          className: \"answer-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          children: \"Valider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }, this)]\n    }, question.texte, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionPage, \"e5bZsRhYDJtuKfW2/pzWqNQRHm0=\");\n_c = QuestionPage;\nexport default QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","QuestionPage","_s","questions","setQuestions","texte","description","answers","setAnswers","remainingTimes","setRemainingTimes","map","isTimerActive","setIsTimerActive","Array","length","fill","questionRefs","intervals","_","index","setInterval","prevRemainingTimes","newRemainingTimes","alert","prevIsTimerActive","newIsTimerActive","forEach","interval","clearInterval","handleStartTimer","questionIndex","current","focus","handleSubmit","e","preventDefault","answer","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","question","onClick","onSubmit","htmlFor","id","name","ref","type","_c","$RefreshReg$"],"sources":["C:/taff/elearningUI/src/pages/questions/index.jsx"],"sourcesContent":["// import React from 'react'\r\n// import Header from '../../composants/Header'\r\n// import HeaderContent from '../../composants/HeaderContent'\r\n// import Footer from '../../composants/Footer'\r\n// import './QuestionCSS.css';\r\n\r\n// const QuestionReponseChrono = () => {\r\n//     return (\r\n//         <>\r\n//             <Header />\r\n//             <HeaderContent />\r\n//             <div className='containeur'>\r\n//                 <h1 className='containeur'>TEST D'EVALUATION DES LEADERS</h1>\r\n//                 <h3 className=''>Repondre aux questions pour valider l'examain</h3>\r\n//             </div>\r\n\r\n//             <Footer />\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default QuestionReponseChrono\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport './QuestionCSS.css'; // Importer le fichier CSS\r\n\r\nconst QuestionPage = () => {\r\n    const [questions, setQuestions] = useState([\r\n        {\r\n            texte: \"Quelle est la capitale de la France ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        // ... autres questions\r\n    ]);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [remainingTimes, setRemainingTimes] = useState(\r\n        questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n    );\r\n    const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n    const questionRefs = useRef(Array(questions.length).fill(null));\r\n\r\n    useEffect(() => {\r\n        const intervals = questions.map((_, index) => {\r\n            return setInterval(() => {\r\n                if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n                    setRemainingTimes((prevRemainingTimes) => {\r\n                        const newRemainingTimes = [...prevRemainingTimes];\r\n                        newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n                        return newRemainingTimes;\r\n                    });\r\n                } else if (remainingTimes[index] === 0) {\r\n                    // Délai écoulé\r\n                    alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n                    setIsTimerActive((prevIsTimerActive) => {\r\n                        const newIsTimerActive = [...prevIsTimerActive];\r\n                        newIsTimerActive[index] = false;\r\n                        return newIsTimerActive;\r\n                    });\r\n                }\r\n            }, 1000);\r\n        });\r\n\r\n        return () => intervals.forEach((interval) => clearInterval(interval));\r\n    }, [remainingTimes, isTimerActive]);\r\n\r\n    const handleStartTimer = (questionIndex) => {\r\n        setIsTimerActive((prevIsTimerActive) => {\r\n            const newIsTimerActive = [...prevIsTimerActive];\r\n            newIsTimerActive[questionIndex] = true;\r\n            return newIsTimerActive;\r\n        });\r\n        questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\r\n    };\r\n\r\n    const handleSubmit = (e, questionIndex) => {\r\n        e.preventDefault();\r\n\r\n        const answer = e.target.answer.value;\r\n\r\n        // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n        // Mettre à jour la liste des réponses\r\n        setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n        // Réinitialiser le chronomètre\r\n        setRemainingTimes((prevRemainingTimes) => {\r\n            const newRemainingTimes = [...prevRemainingTimes];\r\n            newRemainingTimes[questionIndex] = 60;\r\n            return newRemainingTimes;\r\n        });\r\n\r\n        // Vider le champ de réponse\r\n        e.target.answer.value = '';\r\n\r\n        alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n        setIsTimerActive((prevIsTimerActive) => {\r\n            const newIsTimerActive = [...prevIsTimerActive];\r\n            newIsTimerActive[questionIndex] = false;\r\n            return newIsTimerActive;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"question-page\">\r\n            <h1>Formulaire de réponses aux questions ouvertes</h1>\r\n            {questions.map((question, index) => (\r\n                <div key={question.texte} className=\"question-container\">\r\n                    <h2>{question.texte}</h2>\r\n                    <p>{question.description}</p>\r\n                    <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n                    <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\r\n                    {isTimerActive[index] && (\r\n                        <form onSubmit={(e) => handleSubmit(e, index)}>\r\n                            <label htmlFor=\"answer\">Votre réponse : </label>\r\n                            <textarea id=\"answer\" name=\"answer\" ref={questionRefs.current[index]} className=\"answer-field\" />\r\n                            <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n                        </form>\r\n                    )}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}