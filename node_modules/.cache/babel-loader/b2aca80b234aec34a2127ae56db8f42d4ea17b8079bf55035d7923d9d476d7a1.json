{"ast":null,"code":"var _jsxFileName = \"C:\\\\taff\\\\elearningUI\\\\src\\\\pages\\\\questions\\\\QuestionPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import './QuestionCSS.css'; // Importer le fichier CSS\n\n// const QuestionPage = () => {\n//     const [questions, setQuestions] = useState([\n//         {\n//             texte: \"Quelle est la capitale de la France ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         // ... autres questions\n//     ]);\n//     const [answers, setAnswers] = useState([]);\n//     const [remainingTimes, setRemainingTimes] = useState(\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\n//     );\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n//     const questionRefs = useRef(Array(questions.length).fill(null));\n\n//     useEffect(() => {\n//         const intervals = questions.map((_, index) => {\n//             return setInterval(() => {\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\n//                     setRemainingTimes((prevRemainingTimes) => {\n//                         const newRemainingTimes = [...prevRemainingTimes];\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n//                         return newRemainingTimes;\n//                     });\n//                 } else if (remainingTimes[index] === 0) {\n//                     // Délai écoulé\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n//                     setIsTimerActive((prevIsTimerActive) => {\n//                         const newIsTimerActive = [...prevIsTimerActive];\n//                         newIsTimerActive[index] = false;\n//                         return newIsTimerActive;\n//                     });\n//                 }\n//             }, 1000);\n//         });\n\n//         return () => intervals.forEach((interval) => clearInterval(interval));\n//     }, [remainingTimes, isTimerActive]);\n\n//     const handleStartTimer = (questionIndex) => {\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = true;\n//             return newIsTimerActive;\n//         });\n//         questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\n//     };\n\n//     const handleSubmit = (e, questionIndex) => {\n//         e.preventDefault();\n\n//         const answer = e.target.answer.value;\n\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\n\n//         // Mettre à jour la liste des réponses\n//         setAnswers([...answers, { questionIndex, answer }]);\n\n//         // Réinitialiser le chronomètre\n//         setRemainingTimes((prevRemainingTimes) => {\n//             const newRemainingTimes = [...prevRemainingTimes];\n//             newRemainingTimes[questionIndex] = 60;\n//             return newRemainingTimes;\n//         });\n\n//         // Vider le champ de réponse\n//         e.target.answer.value = '';\n\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = false;\n//             return newIsTimerActive;\n//         });\n//     };\n\n//     return (\n//         <div className=\"question-page\">\n//             <h1>Formulaire de réponses aux questions ouvertes</h1>\n//             {questions.map((question, index) => (\n//                 <div key={question.texte} className=\"question-container\">\n//                     <h2>{question.texte}</h2>\n//                     <p>{question.description}</p>\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\n//                     <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\n//                     {isTimerActive[index] && (\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\n//                             <textarea\n//                                 id=\"answer\"\n//                                 name=\"answer\"\n//                                 ref={questionRefs.current[index]}\n//                                 className=\"answer-field\"\n//                             />\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\n//                         </form>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default QuestionPage;\n\n// import React, { useState, useEffect, useRef } from 'react';\n\n// const QuestionPage = () => {\n//     const [questions, setQuestions] = useState([\n//         {\n//             texte: \"Quelle est la capitale du Cameroun?\",\n//             description: \"Appuyer et repondre a la question vous avez 2 min.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//     ]);\n//     const [answers, setAnswers] = useState([]);\n//     const [remainingTimes, setRemainingTimes] = useState(\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\n//     );\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n//     const questionRefs = useRef(Array(questions.length).fill(null));\n//     const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\n\n//     useEffect(() => {\n//         const intervals = questions.map((_, index) => {\n//             return setInterval(() => {\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\n//                     setRemainingTimes((prevRemainingTimes) => {\n//                         const newRemainingTimes = [...prevRemainingTimes];\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n//                         return newRemainingTimes;\n//                     });\n//                 } else if (remainingTimes[index] === 0) {\n//                     // Délai écoulé\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n//                     setIsTimerActive((prevIsTimerActive) => {\n//                         const newIsTimerActive = [...prevIsTimerActive];\n//                         newIsTimerActive[index] = false;\n//                         return newIsTimerActive;\n//                     });\n//                     setIsQuestionLocked((prevIsQuestionLocked) => {\n//                         const newIsQuestionLocked = [...prevIsQuestionLocked];\n//                         newIsQuestionLocked[index] = true;\n//                         return newIsQuestionLocked;\n//                     });\n//                 }\n//             }, 1000);\n//         });\n\n//         return () => intervals.forEach((interval) => clearInterval(interval));\n//     }, [remainingTimes, isTimerActive]);\n\n//     const handleStartTimer = (questionIndex) => {\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = true;\n//             return newIsTimerActive;\n//         });\n//         // Focus sur le champ de réponse\n//     };\n\n//     const handleSubmit = (e, questionIndex) => {\n//         e.preventDefault();\n\n//         const answer = e.target.answer.value;\n\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\n\n//         // Mettre à jour la liste des réponses\n//         setAnswers([...answers, { questionIndex, answer }]);\n\n//         // Réinitialiser le chronomètre\n//         setRemainingTimes((prevRemainingTimes) => {\n//             const newRemainingTimes = [...prevRemainingTimes];\n//             newRemainingTimes[questionIndex] = 60;\n//             return newRemainingTimes;\n//         });\n\n//         // Vider le champ de réponse\n//         e.target.answer.value = '';\n\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = false;\n//             return newIsTimerActive;\n//         });\n//         setIsQuestionLocked((prevIsQuestionLocked) => {\n//             const newIsQuestionLocked = [...prevIsQuestionLocked];\n//             newIsQuestionLocked[questionIndex] = true;\n//             return newIsQuestionLocked;\n//         });\n//     };\n\n//     return (\n//         <div className=\"question-page\">\n//             {questions.map((question, index) => (\n//                 <div key={question.texte} className=\"question-container\">\n//                     <h2 className='texte'>{question.texte}</h2>\n//                     <p>{question.description}</p>\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\n//                     <button\n//                         onClick={() => handleStartTimer(index)}\n//                         className=\"start-button\"\n//                         disabled={isQuestionLocked[index]}\n//                     >\n//                         Démarrer le chronomètre\n//                     </button>\n//                     {isTimerActive[index] && !isQuestionLocked[index] && (\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\n//                             <textarea\n//                                 id=\"answer\"\n//                                 name=\"answer\"\n//                                 ref={questionRefs.current[index]}\n//                                 className=\"answer-field\"\n//                                 disabled={isQuestionLocked[index]}\n//                             />\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\n//                         </form>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default QuestionPage;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport QuestionForm from './QuestionForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([{\n    texte: \"Quelle est la capitale du Cameroun?\",\n    description: \"Appuyez et répondez à la question. Vous avez 2 minutes.\",\n    type: \"reponse_courte\"\n  }\n  // ... (17 questions restantes)\n  ]);\n  const [answers, setAnswers] = useState([]);\n  const [remainingTimes, setRemainingTimes] = useState(questions.map(() => 60) // 60 secondes par défaut pour chaque question\n  );\n  const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n  const questionRefs = useRef(Array(questions.length).fill(null));\n  const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\n  const navigate = useNavigate();\n  useEffect(() => {\n    const intervals = questions.map((_, index) => {\n      return setInterval(() => {\n        if (remainingTimes[index] > 0 && isTimerActive[index]) {\n          setRemainingTimes(prevRemainingTimes => {\n            const newRemainingTimes = [...prevRemainingTimes];\n            newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n            return newRemainingTimes;\n          });\n        } else if (remainingTimes[index] === 0) {\n          // Délai écoulé\n          alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n          setIsTimerActive(prevIsTimerActive => {\n            const newIsTimerActive = [...prevIsTimerActive];\n            newIsTimerActive[index] = false;\n            return newIsTimerActive;\n          });\n          setIsQuestionLocked(prevIsQuestionLocked => {\n            const newIsQuestionLocked = [...prevIsQuestionLocked];\n            newIsQuestionLocked[index] = true;\n            return newIsQuestionLocked;\n          });\n        }\n      }, 1000);\n    });\n    return () => intervals.forEach(interval => clearInterval(interval));\n  }, [remainingTimes, isTimerActive]);\n  const handleStartTimer = questionIndex => {\n    setIsTimerActive(prevIsTimerActive => {\n      const newIsTimerActive = [...prevIsTimerActive];\n      newIsTimerActive[questionIndex] = true;\n      return newIsTimerActive;\n    });\n    // Focus sur le champ de réponse\n    questionRefs.current[questionIndex].focus();\n  };\n  const handleSubmit = (e, questionIndex) => {\n    e.preventDefault();\n    const answer = e.target.answer.value;\n\n    // Envoyer la réponse au serveur ou l'enregistrer localement\n    // Vous pouvez commenter/décommenter cette section en fonction de vos besoins\n    // console.log(\"Question\", questionIndex + 1, \":\", answer);\n\n    // Mettre à jour la liste des réponses\n    setAnswers([...answers, {\n      questionIndex,\n      answer\n    }]);\n\n    // Réinitialiser le chronomètre\n    setRemainingTimes(prevRemainingTimes => {\n      const newRemainingTimes = [...prevRemainingTimes];\n      newRemainingTimes[questionIndex] = 60;\n      return newRemainingTimes;\n    });\n\n    // Vider le champ de réponse\n    e.target.answer.value = \"\";\n    alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n    if (questionIndex < questions.length - 1) {\n      // Déverrouiller la question suivante\n      setIsQuestionLocked(prevIsQuestionLocked => {\n        const newIsQuestionLocked = [...prevIsQuestionLocked];\n        newIsQuestionLocked[questionIndex + 1] = false;\n        return newIsQuestionLocked;\n      });\n    } else {\n      // Rediriger vers la page suivante\n      navigate(\"/next-page\", {\n        state: {\n          answers\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-page\",\n    children: questions.map((question, questionIndex) => /*#__PURE__*/_jsxDEV(QuestionForm, {\n      question: question,\n      questionIndex: questionIndex,\n      remainingTime: remainingTimes[questionIndex],\n      isQuestionLocked: isQuestionLocked[questionIndex],\n      onAnswerSubmit: handleSubmit,\n      handleStartTimer: handleStartTimer,\n      questionRef: questionRefs.current[questionIndex]\n    }, question.texte, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 373,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionPage, \"38s+2NelcOXGik32vovCqQYkiyk=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionPage;\nexport default QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","QuestionForm","jsxDEV","_jsxDEV","QuestionPage","_s","questions","setQuestions","texte","description","type","answers","setAnswers","remainingTimes","setRemainingTimes","map","isTimerActive","setIsTimerActive","Array","length","fill","questionRefs","isQuestionLocked","setIsQuestionLocked","navigate","intervals","_","index","setInterval","prevRemainingTimes","newRemainingTimes","alert","prevIsTimerActive","newIsTimerActive","prevIsQuestionLocked","newIsQuestionLocked","forEach","interval","clearInterval","handleStartTimer","questionIndex","current","focus","handleSubmit","e","preventDefault","answer","target","value","state","className","children","question","remainingTime","onAnswerSubmit","questionRef","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/taff/elearningUI/src/pages/questions/QuestionPage.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import './QuestionCSS.css'; // Importer le fichier CSS\r\n\r\n// const QuestionPage = () => {\r\n//     const [questions, setQuestions] = useState([\r\n//         {\r\n//             texte: \"Quelle est la capitale de la France ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         // ... autres questions\r\n//     ]);\r\n//     const [answers, setAnswers] = useState([]);\r\n//     const [remainingTimes, setRemainingTimes] = useState(\r\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n//     );\r\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n//     const questionRefs = useRef(Array(questions.length).fill(null));\r\n\r\n//     useEffect(() => {\r\n//         const intervals = questions.map((_, index) => {\r\n//             return setInterval(() => {\r\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n//                     setRemainingTimes((prevRemainingTimes) => {\r\n//                         const newRemainingTimes = [...prevRemainingTimes];\r\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n//                         return newRemainingTimes;\r\n//                     });\r\n//                 } else if (remainingTimes[index] === 0) {\r\n//                     // Délai écoulé\r\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n//                     setIsTimerActive((prevIsTimerActive) => {\r\n//                         const newIsTimerActive = [...prevIsTimerActive];\r\n//                         newIsTimerActive[index] = false;\r\n//                         return newIsTimerActive;\r\n//                     });\r\n//                 }\r\n//             }, 1000);\r\n//         });\r\n\r\n//         return () => intervals.forEach((interval) => clearInterval(interval));\r\n//     }, [remainingTimes, isTimerActive]);\r\n\r\n//     const handleStartTimer = (questionIndex) => {\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = true;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\r\n//     };\r\n\r\n//     const handleSubmit = (e, questionIndex) => {\r\n//         e.preventDefault();\r\n\r\n//         const answer = e.target.answer.value;\r\n\r\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n//         // Mettre à jour la liste des réponses\r\n//         setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n//         // Réinitialiser le chronomètre\r\n//         setRemainingTimes((prevRemainingTimes) => {\r\n//             const newRemainingTimes = [...prevRemainingTimes];\r\n//             newRemainingTimes[questionIndex] = 60;\r\n//             return newRemainingTimes;\r\n//         });\r\n\r\n//         // Vider le champ de réponse\r\n//         e.target.answer.value = '';\r\n\r\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = false;\r\n//             return newIsTimerActive;\r\n//         });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"question-page\">\r\n//             <h1>Formulaire de réponses aux questions ouvertes</h1>\r\n//             {questions.map((question, index) => (\r\n//                 <div key={question.texte} className=\"question-container\">\r\n//                     <h2>{question.texte}</h2>\r\n//                     <p>{question.description}</p>\r\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n//                     <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\r\n//                     {isTimerActive[index] && (\r\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\r\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\r\n//                             <textarea\r\n//                                 id=\"answer\"\r\n//                                 name=\"answer\"\r\n//                                 ref={questionRefs.current[index]}\r\n//                                 className=\"answer-field\"\r\n//                             />\r\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n//                         </form>\r\n//                     )}\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default QuestionPage;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n\r\n\r\n// const QuestionPage = () => {\r\n//     const [questions, setQuestions] = useState([\r\n//         {\r\n//             texte: \"Quelle est la capitale du Cameroun?\",\r\n//             description: \"Appuyer et repondre a la question vous avez 2 min.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//     ]);\r\n//     const [answers, setAnswers] = useState([]);\r\n//     const [remainingTimes, setRemainingTimes] = useState(\r\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n//     );\r\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n//     const questionRefs = useRef(Array(questions.length).fill(null));\r\n//     const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\r\n\r\n//     useEffect(() => {\r\n//         const intervals = questions.map((_, index) => {\r\n//             return setInterval(() => {\r\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n//                     setRemainingTimes((prevRemainingTimes) => {\r\n//                         const newRemainingTimes = [...prevRemainingTimes];\r\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n//                         return newRemainingTimes;\r\n//                     });\r\n//                 } else if (remainingTimes[index] === 0) {\r\n//                     // Délai écoulé\r\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n//                     setIsTimerActive((prevIsTimerActive) => {\r\n//                         const newIsTimerActive = [...prevIsTimerActive];\r\n//                         newIsTimerActive[index] = false;\r\n//                         return newIsTimerActive;\r\n//                     });\r\n//                     setIsQuestionLocked((prevIsQuestionLocked) => {\r\n//                         const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n//                         newIsQuestionLocked[index] = true;\r\n//                         return newIsQuestionLocked;\r\n//                     });\r\n//                 }\r\n//             }, 1000);\r\n//         });\r\n\r\n//         return () => intervals.forEach((interval) => clearInterval(interval));\r\n//     }, [remainingTimes, isTimerActive]);\r\n\r\n//     const handleStartTimer = (questionIndex) => {\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = true;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         // Focus sur le champ de réponse\r\n//     };\r\n\r\n//     const handleSubmit = (e, questionIndex) => {\r\n//         e.preventDefault();\r\n\r\n//         const answer = e.target.answer.value;\r\n\r\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n//         // Mettre à jour la liste des réponses\r\n//         setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n//         // Réinitialiser le chronomètre\r\n//         setRemainingTimes((prevRemainingTimes) => {\r\n//             const newRemainingTimes = [...prevRemainingTimes];\r\n//             newRemainingTimes[questionIndex] = 60;\r\n//             return newRemainingTimes;\r\n//         });\r\n\r\n//         // Vider le champ de réponse\r\n//         e.target.answer.value = '';\r\n\r\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = false;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         setIsQuestionLocked((prevIsQuestionLocked) => {\r\n//             const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n//             newIsQuestionLocked[questionIndex] = true;\r\n//             return newIsQuestionLocked;\r\n//         });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"question-page\">\r\n//             {questions.map((question, index) => (\r\n//                 <div key={question.texte} className=\"question-container\">\r\n//                     <h2 className='texte'>{question.texte}</h2>\r\n//                     <p>{question.description}</p>\r\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n//                     <button\r\n//                         onClick={() => handleStartTimer(index)}\r\n//                         className=\"start-button\"\r\n//                         disabled={isQuestionLocked[index]}\r\n//                     >\r\n//                         Démarrer le chronomètre\r\n//                     </button>\r\n//                     {isTimerActive[index] && !isQuestionLocked[index] && (\r\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\r\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\r\n//                             <textarea\r\n//                                 id=\"answer\"\r\n//                                 name=\"answer\"\r\n//                                 ref={questionRefs.current[index]}\r\n//                                 className=\"answer-field\"\r\n//                                 disabled={isQuestionLocked[index]}\r\n//                             />\r\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n//                         </form>\r\n//                     )}\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default QuestionPage;\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport QuestionForm from './QuestionForm';\r\n\r\nconst QuestionPage = () => {\r\n    const [questions, setQuestions] = useState([\r\n        {\r\n            texte: \"Quelle est la capitale du Cameroun?\",\r\n            description: \"Appuyez et répondez à la question. Vous avez 2 minutes.\",\r\n            type: \"reponse_courte\",\r\n        },\r\n        // ... (17 questions restantes)\r\n    ]);\r\n\r\n    const [answers, setAnswers] = useState([]);\r\n    const [remainingTimes, setRemainingTimes] = useState(\r\n        questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n    );\r\n    const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n    const questionRefs = useRef(Array(questions.length).fill(null));\r\n    const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const intervals = questions.map((_, index) => {\r\n            return setInterval(() => {\r\n                if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n                    setRemainingTimes((prevRemainingTimes) => {\r\n                        const newRemainingTimes = [...prevRemainingTimes];\r\n                        newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n                        return newRemainingTimes;\r\n                    });\r\n                } else if (remainingTimes[index] === 0) {\r\n                    // Délai écoulé\r\n                    alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n                    setIsTimerActive((prevIsTimerActive) => {\r\n                        const newIsTimerActive = [...prevIsTimerActive];\r\n                        newIsTimerActive[index] = false;\r\n                        return newIsTimerActive;\r\n                    });\r\n                    setIsQuestionLocked((prevIsQuestionLocked) => {\r\n                        const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n                        newIsQuestionLocked[index] = true;\r\n                        return newIsQuestionLocked;\r\n                    });\r\n                }\r\n            }, 1000);\r\n        });\r\n\r\n        return () => intervals.forEach((interval) => clearInterval(interval));\r\n    }, [remainingTimes, isTimerActive]);\r\n\r\n    const handleStartTimer = (questionIndex) => {\r\n        setIsTimerActive((prevIsTimerActive) => {\r\n            const newIsTimerActive = [...prevIsTimerActive];\r\n            newIsTimerActive[questionIndex] = true;\r\n            return newIsTimerActive;\r\n        });\r\n        // Focus sur le champ de réponse\r\n        questionRefs.current[questionIndex].focus();\r\n    };\r\n\r\n    const handleSubmit = (e, questionIndex) => {\r\n        e.preventDefault();\r\n\r\n        const answer = e.target.answer.value;\r\n\r\n        // Envoyer la réponse au serveur ou l'enregistrer localement\r\n        // Vous pouvez commenter/décommenter cette section en fonction de vos besoins\r\n        // console.log(\"Question\", questionIndex + 1, \":\", answer);\r\n\r\n        // Mettre à jour la liste des réponses\r\n        setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n        // Réinitialiser le chronomètre\r\n        setRemainingTimes((prevRemainingTimes) => {\r\n            const newRemainingTimes = [...prevRemainingTimes];\r\n            newRemainingTimes[questionIndex] = 60;\r\n            return newRemainingTimes;\r\n        });\r\n\r\n        // Vider le champ de réponse\r\n        e.target.answer.value = \"\";\r\n\r\n        alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n\r\n        if (questionIndex < questions.length - 1) {\r\n            // Déverrouiller la question suivante\r\n            setIsQuestionLocked((prevIsQuestionLocked) => {\r\n                const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n                newIsQuestionLocked[questionIndex + 1] = false;\r\n                return newIsQuestionLocked;\r\n            });\r\n        } else {\r\n            // Rediriger vers la page suivante\r\n            navigate(\"/next-page\", { state: { answers } });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"question-page\">\r\n            {questions.map((question, questionIndex) => (\r\n                <QuestionForm\r\n                    key={question.texte}\r\n                    question={question}\r\n                    questionIndex={questionIndex}\r\n                    remainingTime={remainingTimes[questionIndex]}\r\n                    isQuestionLocked={isQuestionLocked[questionIndex]}\r\n                    onAnswerSubmit={handleSubmit}\r\n                    handleStartTimer={handleStartTimer}\r\n                    questionRef={questionRefs.current[questionIndex]}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionPage;\r\n\r\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}