{"ast":null,"code":"var _jsxFileName = \"C:\\\\taff\\\\elearningUI\\\\src\\\\pages\\\\questions\\\\QuestionPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import './QuestionCSS.css'; // Importer le fichier CSS\n\n// const QuestionPage = () => {\n//     const [questions, setQuestions] = useState([\n//         {\n//             texte: \"Quelle est la capitale de la France ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         // ... autres questions\n//     ]);\n//     const [answers, setAnswers] = useState([]);\n//     const [remainingTimes, setRemainingTimes] = useState(\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\n//     );\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n//     const questionRefs = useRef(Array(questions.length).fill(null));\n\n//     useEffect(() => {\n//         const intervals = questions.map((_, index) => {\n//             return setInterval(() => {\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\n//                     setRemainingTimes((prevRemainingTimes) => {\n//                         const newRemainingTimes = [...prevRemainingTimes];\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n//                         return newRemainingTimes;\n//                     });\n//                 } else if (remainingTimes[index] === 0) {\n//                     // Délai écoulé\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n//                     setIsTimerActive((prevIsTimerActive) => {\n//                         const newIsTimerActive = [...prevIsTimerActive];\n//                         newIsTimerActive[index] = false;\n//                         return newIsTimerActive;\n//                     });\n//                 }\n//             }, 1000);\n//         });\n\n//         return () => intervals.forEach((interval) => clearInterval(interval));\n//     }, [remainingTimes, isTimerActive]);\n\n//     const handleStartTimer = (questionIndex) => {\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = true;\n//             return newIsTimerActive;\n//         });\n//         questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\n//     };\n\n//     const handleSubmit = (e, questionIndex) => {\n//         e.preventDefault();\n\n//         const answer = e.target.answer.value;\n\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\n\n//         // Mettre à jour la liste des réponses\n//         setAnswers([...answers, { questionIndex, answer }]);\n\n//         // Réinitialiser le chronomètre\n//         setRemainingTimes((prevRemainingTimes) => {\n//             const newRemainingTimes = [...prevRemainingTimes];\n//             newRemainingTimes[questionIndex] = 60;\n//             return newRemainingTimes;\n//         });\n\n//         // Vider le champ de réponse\n//         e.target.answer.value = '';\n\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = false;\n//             return newIsTimerActive;\n//         });\n//     };\n\n//     return (\n//         <div className=\"question-page\">\n//             <h1>Formulaire de réponses aux questions ouvertes</h1>\n//             {questions.map((question, index) => (\n//                 <div key={question.texte} className=\"question-container\">\n//                     <h2>{question.texte}</h2>\n//                     <p>{question.description}</p>\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\n//                     <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\n//                     {isTimerActive[index] && (\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\n//                             <textarea\n//                                 id=\"answer\"\n//                                 name=\"answer\"\n//                                 ref={questionRefs.current[index]}\n//                                 className=\"answer-field\"\n//                             />\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\n//                         </form>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default QuestionPage;\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Row } from 'react-bootstrap';\nimport { Col } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([{\n    texte: \"Quelle est la capitale du Cameroun?\",\n    description: \"Appuyer et repondre a la question vous avez 2 min.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }]);\n  const [answers, setAnswers] = useState([]);\n  const [remainingTimes, setRemainingTimes] = useState(questions.map(() => 60) // 60 secondes par défaut pour chaque question\n  );\n  const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n  const questionRefs = useRef(Array(questions.length).fill(null));\n  const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\n  useEffect(() => {\n    /*#__PURE__*/_jsxDEV(Row, {\n      style: {\n        backgroundColor: \"rgba(36,172,242,0.3)\",\n        borderRadius: 5,\n        margin: 20,\n        marginTop: 30,\n        padding: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontWeight: 'bold',\n              fontSize: 17\n            },\n            children: \"Fonctionement du test de question a r\\xE9ponse ouvertes:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"test\",\n            children: \"Ce test en ligne \\xE0 r\\xE9ponses ouvertes est compos\\xE9 de 8 questions r\\xE9parties en 3 parties.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n            children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                margin: 5\n              },\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: \"Partie1: Leadership:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 51\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                margin: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: \"Partie2: Entreprenariat:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 51\n              }, this), \" Les modules ne sont pas tous accessibles simultan\\xE9ment. Au d\\xE9but, seul le premier module est d\\xE9verrouill\\xE9. Chaque semaine, un nouveau module sera accessible. Cette approche progressive vous permettra de suivre la formation de mani\\xE8re structur\\xE9e et d\\u2019assimiler les informations \\xE9tape par \\xE9tape\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              style: {\n                margin: 5\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: \"Partie2: Comp\\xE9tence Professionnelle:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 51\n              }, this), \" \\xC0 la fin de la formation, si vous avez compl\\xE9t\\xE9 tous les chapitres et r\\xE9ussi les quiz, vous recevrez une attestation qui t\\xE9moigne de votre engagement et de vos comp\\xE9tences nouvellement acquises.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }, this);\n    const intervals = questions.map((_, index) => {\n      return setInterval(() => {\n        if (remainingTimes[index] > 0 && isTimerActive[index]) {\n          setRemainingTimes(prevRemainingTimes => {\n            const newRemainingTimes = [...prevRemainingTimes];\n            newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n            return newRemainingTimes;\n          });\n        } else if (remainingTimes[index] === 0) {\n          // Délai écoulé\n          alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n          setIsTimerActive(prevIsTimerActive => {\n            const newIsTimerActive = [...prevIsTimerActive];\n            newIsTimerActive[index] = false;\n            return newIsTimerActive;\n          });\n          setIsQuestionLocked(prevIsQuestionLocked => {\n            const newIsQuestionLocked = [...prevIsQuestionLocked];\n            newIsQuestionLocked[index] = true;\n            return newIsQuestionLocked;\n          });\n        }\n      }, 1000);\n    });\n    return () => intervals.forEach(interval => clearInterval(interval));\n  }, [remainingTimes, isTimerActive]);\n  const handleStartTimer = questionIndex => {\n    setIsTimerActive(prevIsTimerActive => {\n      const newIsTimerActive = [...prevIsTimerActive];\n      newIsTimerActive[questionIndex] = true;\n      return newIsTimerActive;\n    });\n    // Focus sur le champ de réponse\n  };\n  const handleSubmit = (e, questionIndex) => {\n    e.preventDefault();\n    const answer = e.target.answer.value;\n\n    // Envoyer la réponse au serveur ou l'enregistrer localement\n\n    // Mettre à jour la liste des réponses\n    setAnswers([...answers, {\n      questionIndex,\n      answer\n    }]);\n\n    // Réinitialiser le chronomètre\n    setRemainingTimes(prevRemainingTimes => {\n      const newRemainingTimes = [...prevRemainingTimes];\n      newRemainingTimes[questionIndex] = 60;\n      return newRemainingTimes;\n    });\n\n    // Vider le champ de réponse\n    e.target.answer.value = '';\n    alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n    setIsTimerActive(prevIsTimerActive => {\n      const newIsTimerActive = [...prevIsTimerActive];\n      newIsTimerActive[questionIndex] = false;\n      return newIsTimerActive;\n    });\n    setIsQuestionLocked(prevIsQuestionLocked => {\n      const newIsQuestionLocked = [...prevIsQuestionLocked];\n      newIsQuestionLocked[questionIndex] = true;\n      return newIsQuestionLocked;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-page\",\n    children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"texte\",\n        children: question.texte\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"time-remaining\",\n        children: [\"Temps restant : \", remainingTimes[index], \" secondes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStartTimer(index),\n        className: \"start-button\",\n        disabled: isQuestionLocked[index],\n        children: \"D\\xE9marrer le chronom\\xE8tre\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 21\n      }, this), isTimerActive[index] && !isQuestionLocked[index] && /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleSubmit(e, index),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"answer\",\n          children: \"Votre r\\xE9ponse : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"answer\",\n          name: \"answer\",\n          ref: questionRefs.current[index],\n          className: \"answer-field\",\n          disabled: isQuestionLocked[index]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submit-button\",\n          children: \"Valider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 25\n      }, this)]\n    }, question.texte, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionPage, \"hlOATKn6zI4Ol59YsZf01OvEc8o=\");\n_c = QuestionPage;\nexport default QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Row","Col","jsxDEV","_jsxDEV","QuestionPage","_s","questions","setQuestions","texte","description","answers","setAnswers","remainingTimes","setRemainingTimes","map","isTimerActive","setIsTimerActive","Array","length","fill","questionRefs","isQuestionLocked","setIsQuestionLocked","style","backgroundColor","borderRadius","margin","marginTop","padding","children","fontWeight","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","className","intervals","_","index","setInterval","prevRemainingTimes","newRemainingTimes","alert","prevIsTimerActive","newIsTimerActive","prevIsQuestionLocked","newIsQuestionLocked","forEach","interval","clearInterval","handleStartTimer","questionIndex","handleSubmit","e","preventDefault","answer","target","value","question","onClick","disabled","onSubmit","htmlFor","id","name","ref","current","type","_c","$RefreshReg$"],"sources":["C:/taff/elearningUI/src/pages/questions/QuestionPage.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import './QuestionCSS.css'; // Importer le fichier CSS\r\n\r\n// const QuestionPage = () => {\r\n//     const [questions, setQuestions] = useState([\r\n//         {\r\n//             texte: \"Quelle est la capitale de la France ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         // ... autres questions\r\n//     ]);\r\n//     const [answers, setAnswers] = useState([]);\r\n//     const [remainingTimes, setRemainingTimes] = useState(\r\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n//     );\r\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n//     const questionRefs = useRef(Array(questions.length).fill(null));\r\n\r\n//     useEffect(() => {\r\n//         const intervals = questions.map((_, index) => {\r\n//             return setInterval(() => {\r\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n//                     setRemainingTimes((prevRemainingTimes) => {\r\n//                         const newRemainingTimes = [...prevRemainingTimes];\r\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n//                         return newRemainingTimes;\r\n//                     });\r\n//                 } else if (remainingTimes[index] === 0) {\r\n//                     // Délai écoulé\r\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n//                     setIsTimerActive((prevIsTimerActive) => {\r\n//                         const newIsTimerActive = [...prevIsTimerActive];\r\n//                         newIsTimerActive[index] = false;\r\n//                         return newIsTimerActive;\r\n//                     });\r\n//                 }\r\n//             }, 1000);\r\n//         });\r\n\r\n//         return () => intervals.forEach((interval) => clearInterval(interval));\r\n//     }, [remainingTimes, isTimerActive]);\r\n\r\n//     const handleStartTimer = (questionIndex) => {\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = true;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\r\n//     };\r\n\r\n//     const handleSubmit = (e, questionIndex) => {\r\n//         e.preventDefault();\r\n\r\n//         const answer = e.target.answer.value;\r\n\r\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n//         // Mettre à jour la liste des réponses\r\n//         setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n//         // Réinitialiser le chronomètre\r\n//         setRemainingTimes((prevRemainingTimes) => {\r\n//             const newRemainingTimes = [...prevRemainingTimes];\r\n//             newRemainingTimes[questionIndex] = 60;\r\n//             return newRemainingTimes;\r\n//         });\r\n\r\n//         // Vider le champ de réponse\r\n//         e.target.answer.value = '';\r\n\r\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = false;\r\n//             return newIsTimerActive;\r\n//         });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"question-page\">\r\n//             <h1>Formulaire de réponses aux questions ouvertes</h1>\r\n//             {questions.map((question, index) => (\r\n//                 <div key={question.texte} className=\"question-container\">\r\n//                     <h2>{question.texte}</h2>\r\n//                     <p>{question.description}</p>\r\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n//                     <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\r\n//                     {isTimerActive[index] && (\r\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\r\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\r\n//                             <textarea\r\n//                                 id=\"answer\"\r\n//                                 name=\"answer\"\r\n//                                 ref={questionRefs.current[index]}\r\n//                                 className=\"answer-field\"\r\n//                             />\r\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n//                         </form>\r\n//                     )}\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default QuestionPage;\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Row } from 'react-bootstrap';\r\nimport { Col } from 'react-bootstrap';\r\n\r\n\r\nconst QuestionPage = () => {\r\n    const [questions, setQuestions] = useState([\r\n        {\r\n            texte: \"Quelle est la capitale du Cameroun?\",\r\n            description: \"Appuyer et repondre a la question vous avez 2 min.\"\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n    ]);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [remainingTimes, setRemainingTimes] = useState(\r\n        questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n    );\r\n    const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n    const questionRefs = useRef(Array(questions.length).fill(null));\r\n    const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\r\n\r\n    useEffect(() => {\r\n\r\n        <Row style={{ backgroundColor: \"rgba(36,172,242,0.3)\", borderRadius: 5, margin: 20, marginTop: 30, padding: 20 }}>\r\n\r\n            <Col>\r\n                <div>\r\n                    <div style={{ fontWeight: 'bold', fontSize: 17 }}>Fonctionement du test de question a réponse ouvertes:</div>\r\n                    <p className='test'>Ce test en ligne à réponses ouvertes est composé de 8 questions réparties en 3 parties.</p>\r\n                    <ol>\r\n                        <ul style={{ margin: 5 }}><span style={{ fontWeight: 'bold' }}>Partie1: Leadership:</span></ul>\r\n                        <ul style={{ margin: 5 }}><span style={{ fontWeight: 'bold' }}>Partie2: Entreprenariat:</span> Les modules ne sont pas tous accessibles simultanément. Au début, seul le premier module est déverrouillé. Chaque semaine, un nouveau module sera accessible. Cette approche progressive vous permettra de suivre la formation de manière structurée et d’assimiler les informations étape par étape</ul>\r\n                        <ul style={{ margin: 5 }}><span style={{ fontWeight: 'bold' }}>Partie2: Compétence Professionnelle:</span> À la fin de la formation, si vous avez complété tous les chapitres et réussi les quiz, vous recevrez une attestation qui témoigne de votre engagement et de vos compétences nouvellement acquises.</ul>\r\n                    </ol>\r\n                </div>\r\n            </Col>\r\n        </Row>\r\n\r\n\r\n        const intervals = questions.map((_, index) => {\r\n            return setInterval(() => {\r\n                if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n                    setRemainingTimes((prevRemainingTimes) => {\r\n                        const newRemainingTimes = [...prevRemainingTimes];\r\n                        newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n                        return newRemainingTimes;\r\n                    });\r\n                } else if (remainingTimes[index] === 0) {\r\n                    // Délai écoulé\r\n                    alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n                    setIsTimerActive((prevIsTimerActive) => {\r\n                        const newIsTimerActive = [...prevIsTimerActive];\r\n                        newIsTimerActive[index] = false;\r\n                        return newIsTimerActive;\r\n                    });\r\n                    setIsQuestionLocked((prevIsQuestionLocked) => {\r\n                        const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n                        newIsQuestionLocked[index] = true;\r\n                        return newIsQuestionLocked;\r\n                    });\r\n                }\r\n            }, 1000);\r\n        });\r\n\r\n        return () => intervals.forEach((interval) => clearInterval(interval));\r\n    }, [remainingTimes, isTimerActive]);\r\n\r\n    const handleStartTimer = (questionIndex) => {\r\n        setIsTimerActive((prevIsTimerActive) => {\r\n            const newIsTimerActive = [...prevIsTimerActive];\r\n            newIsTimerActive[questionIndex] = true;\r\n            return newIsTimerActive;\r\n        });\r\n        // Focus sur le champ de réponse\r\n    };\r\n\r\n    const handleSubmit = (e, questionIndex) => {\r\n        e.preventDefault();\r\n\r\n        const answer = e.target.answer.value;\r\n\r\n        // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n        // Mettre à jour la liste des réponses\r\n        setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n        // Réinitialiser le chronomètre\r\n        setRemainingTimes((prevRemainingTimes) => {\r\n            const newRemainingTimes = [...prevRemainingTimes];\r\n            newRemainingTimes[questionIndex] = 60;\r\n            return newRemainingTimes;\r\n        });\r\n\r\n        // Vider le champ de réponse\r\n        e.target.answer.value = '';\r\n\r\n        alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n        setIsTimerActive((prevIsTimerActive) => {\r\n            const newIsTimerActive = [...prevIsTimerActive];\r\n            newIsTimerActive[questionIndex] = false;\r\n            return newIsTimerActive;\r\n        });\r\n        setIsQuestionLocked((prevIsQuestionLocked) => {\r\n            const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n            newIsQuestionLocked[questionIndex] = true;\r\n            return newIsQuestionLocked;\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"question-page\">\r\n            {questions.map((question, index) => (\r\n                <div key={question.texte} className=\"question-container\">\r\n                    <h2 className='texte'>{question.texte}</h2>\r\n                    <p>{question.description}</p>\r\n                    <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n                    <button\r\n                        onClick={() => handleStartTimer(index)}\r\n                        className=\"start-button\"\r\n                        disabled={isQuestionLocked[index]}\r\n                    >\r\n                        Démarrer le chronomètre\r\n                    </button>\r\n                    {isTimerActive[index] && !isQuestionLocked[index] && (\r\n                        <form onSubmit={(e) => handleSubmit(e, index)}>\r\n                            <label htmlFor=\"answer\">Votre réponse : </label>\r\n                            <textarea\r\n                                id=\"answer\"\r\n                                name=\"answer\"\r\n                                ref={questionRefs.current[index]}\r\n                                className=\"answer-field\"\r\n                                disabled={isQuestionLocked[index]}\r\n                            />\r\n                            <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n                        </form>\r\n                    )}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionPage;\r\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,GAAG,QAAQ,iBAAiB;AACrC,SAASC,GAAG,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,CACvC;IACIW,KAAK,EAAE,qCAAqC;IAC5CC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,KAAK,EAAE,4CAA4C;IACnDC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,KAAK,EAAE,4CAA4C;IACnDC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,KAAK,EAAE,4CAA4C;IACnDC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,KAAK,EAAE,4CAA4C;IACnDC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,KAAK,EAAE,4CAA4C;IACnDC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,KAAK,EAAE,4CAA4C;IACnDC,WAAW,EAAE;EACjB,CAAC,EACD;IACID,KAAK,EAAE,4CAA4C;IACnDC,WAAW,EAAE;EACjB,CAAC,EAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}