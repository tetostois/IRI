{"ast":null,"code":"var _jsxFileName = \"C:\\\\taff\\\\elearningUI\\\\src\\\\pages\\\\questions\\\\QuestionPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import './QuestionCSS.css'; // Importer le fichier CSS\n\n// const QuestionPage = () => {\n//     const [questions, setQuestions] = useState([\n//         {\n//             texte: \"Quelle est la capitale de la France ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         // ... autres questions\n//     ]);\n//     const [answers, setAnswers] = useState([]);\n//     const [remainingTimes, setRemainingTimes] = useState(\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\n//     );\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n//     const questionRefs = useRef(Array(questions.length).fill(null));\n\n//     useEffect(() => {\n//         const intervals = questions.map((_, index) => {\n//             return setInterval(() => {\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\n//                     setRemainingTimes((prevRemainingTimes) => {\n//                         const newRemainingTimes = [...prevRemainingTimes];\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n//                         return newRemainingTimes;\n//                     });\n//                 } else if (remainingTimes[index] === 0) {\n//                     // Délai écoulé\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n//                     setIsTimerActive((prevIsTimerActive) => {\n//                         const newIsTimerActive = [...prevIsTimerActive];\n//                         newIsTimerActive[index] = false;\n//                         return newIsTimerActive;\n//                     });\n//                 }\n//             }, 1000);\n//         });\n\n//         return () => intervals.forEach((interval) => clearInterval(interval));\n//     }, [remainingTimes, isTimerActive]);\n\n//     const handleStartTimer = (questionIndex) => {\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = true;\n//             return newIsTimerActive;\n//         });\n//         questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\n//     };\n\n//     const handleSubmit = (e, questionIndex) => {\n//         e.preventDefault();\n\n//         const answer = e.target.answer.value;\n\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\n\n//         // Mettre à jour la liste des réponses\n//         setAnswers([...answers, { questionIndex, answer }]);\n\n//         // Réinitialiser le chronomètre\n//         setRemainingTimes((prevRemainingTimes) => {\n//             const newRemainingTimes = [...prevRemainingTimes];\n//             newRemainingTimes[questionIndex] = 60;\n//             return newRemainingTimes;\n//         });\n\n//         // Vider le champ de réponse\n//         e.target.answer.value = '';\n\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = false;\n//             return newIsTimerActive;\n//         });\n//     };\n\n//     return (\n//         <div className=\"question-page\">\n//             <h1>Formulaire de réponses aux questions ouvertes</h1>\n//             {questions.map((question, index) => (\n//                 <div key={question.texte} className=\"question-container\">\n//                     <h2>{question.texte}</h2>\n//                     <p>{question.description}</p>\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\n//                     <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\n//                     {isTimerActive[index] && (\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\n//                             <textarea\n//                                 id=\"answer\"\n//                                 name=\"answer\"\n//                                 ref={questionRefs.current[index]}\n//                                 className=\"answer-field\"\n//                             />\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\n//                         </form>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default QuestionPage;\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import './QuestionCSS.css'; // Importer le fichier CSS\n\n// const QuestionPage = () => {\n//     const [questions, setQuestions] = useState([\n//         {\n//             texte: \"Quelle est la capitale du Cameroun?\",\n//             description: \"Appuyer et repondre a la question vous avez 2 min.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         // ... autres questions\n//     ]);\n//     const [answers, setAnswers] = useState([]);\n//     const [remainingTimes, setRemainingTimes] = useState(\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\n//     );\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n//     const questionRefs = useRef(Array(questions.length).fill(null));\n//     const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\n\n//     useEffect(() => {\n//         const intervals = questions.map((_, index) => {\n//             return setInterval(() => {\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\n//                     setRemainingTimes((prevRemainingTimes) => {\n//                         const newRemainingTimes = [...prevRemainingTimes];\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n//                         return newRemainingTimes;\n//                     });\n//                 } else if (remainingTimes[index] === 0) {\n//                     // Délai écoulé\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n//                     setIsTimerActive((prevIsTimerActive) => {\n//                         const newIsTimerActive = [...prevIsTimerActive];\n//                         newIsTimerActive[index] = false;\n//                         return newIsTimerActive;\n//                     });\n//                     setIsQuestionLocked((prevIsQuestionLocked) => {\n//                         const newIsQuestionLocked = [...prevIsQuestionLocked];\n//                         newIsQuestionLocked[index] = true;\n//                         return newIsQuestionLocked;\n//                     });\n//                 }\n//             }, 1000);\n//         });\n\n//         return () => intervals.forEach((interval) => clearInterval(interval));\n//     }, [remainingTimes, isTimerActive]);\n\n//     const handleStartTimer = (questionIndex) => {\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = true;\n//             return newIsTimerActive;\n//         });\n//         // Focus sur le champ de réponse\n//     };\n\n//     const handleSubmit = (e, questionIndex) => {\n//         e.preventDefault();\n\n//         const answer = e.target.answer.value;\n\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\n\n//         // Mettre à jour la liste des réponses\n//         setAnswers([...answers, { questionIndex, answer }]);\n\n//         // Réinitialiser le chronomètre\n//         setRemainingTimes((prevRemainingTimes) => {\n//             const newRemainingTimes = [...prevRemainingTimes];\n//             newRemainingTimes[questionIndex] = 60;\n//             return newRemainingTimes;\n//         });\n\n//         // Vider le champ de réponse\n//         e.target.answer.value = '';\n\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = false;\n//             return newIsTimerActive;\n//         });\n//         setIsQuestionLocked((prevIsQuestionLocked) => {\n//             const newIsQuestionLocked = [...prevIsQuestionLocked];\n//             newIsQuestionLocked[questionIndex] = true;\n//             return newIsQuestionLocked;\n//         });\n//     };\n\n//     return (\n//         <div className=\"question-page\">\n//             {questions.map((question, index) => (\n//                 <div key={question.texte} className=\"question-container\">\n//                     <h2 className='texte'>{question.texte}</h2>\n//                     <p>{question.description}</p>\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\n//                     <button\n//                         onClick={() => handleStartTimer(index)}\n//                         className=\"start-button\"\n//                         disabled={isQuestionLocked[index]}\n//                     >\n//                         Démarrer le chronomètre\n//                     </button>\n//                     {isTimerActive[index] && !isQuestionLocked[index] && (\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\n//                             <textarea\n//                                 id=\"answer\"\n//                                 name=\"answer\"\n//                                 ref={questionRefs.current[index]}\n//                                 className=\"answer-field\"\n//                                 disabled={isQuestionLocked[index]}\n//                             />\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\n//                         </form>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default QuestionPage;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"./QuestionCSS.css\"; // Importer le fichier CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([{\n    texte: \"Quelle est la capitale du Cameroun?\",\n    description: \"Appuyer et repondre a la question vous avez 2 min.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }\n  // ... autres questions\n  ]);\n  const [answers, setAnswers] = useState([]);\n  const [remainingTimes, setRemainingTimes] = useState(questions.map(() => 120));\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const intervalRef = useRef(null);\n  useEffect(() => {\n    intervalRef.current = setInterval(() => {\n      setRemainingTimes(prevTimes => prevTimes.map((time, index) => {\n        if (index === currentQuestionIndex && time > 0) {\n          return time - 1;\n        }\n        return time;\n      }));\n    }, 1000);\n    return () => clearInterval(intervalRef.current);\n  }, [currentQuestionIndex, remainingTimes]);\n  const handleAnswerSubmit = answer => {\n    setAnswers([...answers, answer]);\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n    }\n  };\n  const isQuestionUnlocked = index => {\n    return index === 0 || answers.length > index - 1 || remainingTimes[index - 1] <= 0;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-page\",\n    children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: isQuestionUnlocked(index) ? \"question-container\" : \"question-container locked\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.texte\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 21\n      }, this), remainingTimes[index] > 0 && /*#__PURE__*/_jsxDEV(Timer, {\n        timeLeft: remainingTimes[index]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 25\n      }, this), isQuestionUnlocked(index) && /*#__PURE__*/_jsxDEV(QuestionForm, {\n        question: question,\n        onSubmit: handleAnswerSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 25\n      }, this)]\n    }, question.texte, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 354,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionPage, \"nbWPq9pX7QD3V+7VBA2b8kmvQis=\");\n_c = QuestionPage;\nexport default QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","QuestionPage","_s","questions","setQuestions","texte","description","answers","setAnswers","remainingTimes","setRemainingTimes","map","currentQuestionIndex","setCurrentQuestionIndex","intervalRef","current","setInterval","prevTimes","time","index","clearInterval","handleAnswerSubmit","answer","length","prevIndex","isQuestionUnlocked","className","children","question","fileName","_jsxFileName","lineNumber","columnNumber","Timer","timeLeft","QuestionForm","onSubmit","_c","$RefreshReg$"],"sources":["C:/taff/elearningUI/src/pages/questions/QuestionPage.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import './QuestionCSS.css'; // Importer le fichier CSS\r\n\r\n// const QuestionPage = () => {\r\n//     const [questions, setQuestions] = useState([\r\n//         {\r\n//             texte: \"Quelle est la capitale de la France ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         // ... autres questions\r\n//     ]);\r\n//     const [answers, setAnswers] = useState([]);\r\n//     const [remainingTimes, setRemainingTimes] = useState(\r\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n//     );\r\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n//     const questionRefs = useRef(Array(questions.length).fill(null));\r\n\r\n//     useEffect(() => {\r\n//         const intervals = questions.map((_, index) => {\r\n//             return setInterval(() => {\r\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n//                     setRemainingTimes((prevRemainingTimes) => {\r\n//                         const newRemainingTimes = [...prevRemainingTimes];\r\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n//                         return newRemainingTimes;\r\n//                     });\r\n//                 } else if (remainingTimes[index] === 0) {\r\n//                     // Délai écoulé\r\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n//                     setIsTimerActive((prevIsTimerActive) => {\r\n//                         const newIsTimerActive = [...prevIsTimerActive];\r\n//                         newIsTimerActive[index] = false;\r\n//                         return newIsTimerActive;\r\n//                     });\r\n//                 }\r\n//             }, 1000);\r\n//         });\r\n\r\n//         return () => intervals.forEach((interval) => clearInterval(interval));\r\n//     }, [remainingTimes, isTimerActive]);\r\n\r\n//     const handleStartTimer = (questionIndex) => {\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = true;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\r\n//     };\r\n\r\n//     const handleSubmit = (e, questionIndex) => {\r\n//         e.preventDefault();\r\n\r\n//         const answer = e.target.answer.value;\r\n\r\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n//         // Mettre à jour la liste des réponses\r\n//         setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n//         // Réinitialiser le chronomètre\r\n//         setRemainingTimes((prevRemainingTimes) => {\r\n//             const newRemainingTimes = [...prevRemainingTimes];\r\n//             newRemainingTimes[questionIndex] = 60;\r\n//             return newRemainingTimes;\r\n//         });\r\n\r\n//         // Vider le champ de réponse\r\n//         e.target.answer.value = '';\r\n\r\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = false;\r\n//             return newIsTimerActive;\r\n//         });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"question-page\">\r\n//             <h1>Formulaire de réponses aux questions ouvertes</h1>\r\n//             {questions.map((question, index) => (\r\n//                 <div key={question.texte} className=\"question-container\">\r\n//                     <h2>{question.texte}</h2>\r\n//                     <p>{question.description}</p>\r\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n//                     <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\r\n//                     {isTimerActive[index] && (\r\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\r\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\r\n//                             <textarea\r\n//                                 id=\"answer\"\r\n//                                 name=\"answer\"\r\n//                                 ref={questionRefs.current[index]}\r\n//                                 className=\"answer-field\"\r\n//                             />\r\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n//                         </form>\r\n//                     )}\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default QuestionPage;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import './QuestionCSS.css'; // Importer le fichier CSS\r\n\r\n// const QuestionPage = () => {\r\n//     const [questions, setQuestions] = useState([\r\n//         {\r\n//             texte: \"Quelle est la capitale du Cameroun?\",\r\n//             description: \"Appuyer et repondre a la question vous avez 2 min.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         // ... autres questions\r\n//     ]);\r\n//     const [answers, setAnswers] = useState([]);\r\n//     const [remainingTimes, setRemainingTimes] = useState(\r\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n//     );\r\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n//     const questionRefs = useRef(Array(questions.length).fill(null));\r\n//     const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\r\n\r\n//     useEffect(() => {\r\n//         const intervals = questions.map((_, index) => {\r\n//             return setInterval(() => {\r\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n//                     setRemainingTimes((prevRemainingTimes) => {\r\n//                         const newRemainingTimes = [...prevRemainingTimes];\r\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n//                         return newRemainingTimes;\r\n//                     });\r\n//                 } else if (remainingTimes[index] === 0) {\r\n//                     // Délai écoulé\r\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n//                     setIsTimerActive((prevIsTimerActive) => {\r\n//                         const newIsTimerActive = [...prevIsTimerActive];\r\n//                         newIsTimerActive[index] = false;\r\n//                         return newIsTimerActive;\r\n//                     });\r\n//                     setIsQuestionLocked((prevIsQuestionLocked) => {\r\n//                         const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n//                         newIsQuestionLocked[index] = true;\r\n//                         return newIsQuestionLocked;\r\n//                     });\r\n//                 }\r\n//             }, 1000);\r\n//         });\r\n\r\n//         return () => intervals.forEach((interval) => clearInterval(interval));\r\n//     }, [remainingTimes, isTimerActive]);\r\n\r\n//     const handleStartTimer = (questionIndex) => {\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = true;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         // Focus sur le champ de réponse\r\n//     };\r\n\r\n//     const handleSubmit = (e, questionIndex) => {\r\n//         e.preventDefault();\r\n\r\n//         const answer = e.target.answer.value;\r\n\r\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n//         // Mettre à jour la liste des réponses\r\n//         setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n//         // Réinitialiser le chronomètre\r\n//         setRemainingTimes((prevRemainingTimes) => {\r\n//             const newRemainingTimes = [...prevRemainingTimes];\r\n//             newRemainingTimes[questionIndex] = 60;\r\n//             return newRemainingTimes;\r\n//         });\r\n\r\n//         // Vider le champ de réponse\r\n//         e.target.answer.value = '';\r\n\r\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = false;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         setIsQuestionLocked((prevIsQuestionLocked) => {\r\n//             const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n//             newIsQuestionLocked[questionIndex] = true;\r\n//             return newIsQuestionLocked;\r\n//         });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"question-page\">\r\n//             {questions.map((question, index) => (\r\n//                 <div key={question.texte} className=\"question-container\">\r\n//                     <h2 className='texte'>{question.texte}</h2>\r\n//                     <p>{question.description}</p>\r\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n//                     <button\r\n//                         onClick={() => handleStartTimer(index)}\r\n//                         className=\"start-button\"\r\n//                         disabled={isQuestionLocked[index]}\r\n//                     >\r\n//                         Démarrer le chronomètre\r\n//                     </button>\r\n//                     {isTimerActive[index] && !isQuestionLocked[index] && (\r\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\r\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\r\n//                             <textarea\r\n//                                 id=\"answer\"\r\n//                                 name=\"answer\"\r\n//                                 ref={questionRefs.current[index]}\r\n//                                 className=\"answer-field\"\r\n//                                 disabled={isQuestionLocked[index]}\r\n//                             />\r\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n//                         </form>\r\n//                     )}\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default QuestionPage;\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport \"./QuestionCSS.css\"; // Importer le fichier CSS\r\n\r\nconst QuestionPage = () => {\r\n    const [questions, setQuestions] = useState([\r\n        {\r\n            texte: \"Quelle est la capitale du Cameroun?\",\r\n            description: \"Appuyer et repondre a la question vous avez 2 min.\",\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\",\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\",\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\",\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\",\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\",\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\",\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\",\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\",\r\n        },\r\n        // ... autres questions\r\n    ]);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [remainingTimes, setRemainingTimes] = useState(\r\n        questions.map(() => 120)\r\n    );\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const intervalRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        intervalRef.current = setInterval(() => {\r\n            setRemainingTimes((prevTimes) =>\r\n                prevTimes.map((time, index) => {\r\n                    if (index === currentQuestionIndex && time > 0) {\r\n                        return time - 1;\r\n                    }\r\n                    return time;\r\n                })\r\n            );\r\n        }, 1000);\r\n        return () => clearInterval(intervalRef.current);\r\n    }, [currentQuestionIndex, remainingTimes]);\r\n\r\n    const handleAnswerSubmit = (answer) => {\r\n        setAnswers([...answers, answer]);\r\n        if (currentQuestionIndex < questions.length - 1) {\r\n            setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\r\n        }\r\n    };\r\n\r\n    const isQuestionUnlocked = (index) => {\r\n        return (\r\n            index === 0 ||\r\n            (answers.length > index - 1) ||\r\n            (remainingTimes[index - 1] <= 0)\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"question-page\">\r\n            {questions.map((question, index) => (\r\n                <div\r\n                    key={question.texte}\r\n                    className={\r\n                        isQuestionUnlocked(index)\r\n                            ? \"question-container\"\r\n                            : \"question-container locked\"\r\n                    }\r\n                >\r\n                    <h2>{question.texte}</h2>\r\n                    <p>{question.description}</p>\r\n                    {remainingTimes[index] > 0 && (\r\n                        <Timer timeLeft={remainingTimes[index]} />\r\n                    )}\r\n                    {isQuestionUnlocked(index) && (\r\n                        <QuestionForm\r\n                            question={question}\r\n                            onSubmit={handleAnswerSubmit}\r\n                        />\r\n                    )}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionPage;\r\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}