{"ast":null,"code":"var _jsxFileName = \"C:\\\\taff\\\\elearningUI\\\\src\\\\pages\\\\questions\\\\index.jsx\",\n  _s = $RefreshSig$();\n// import React from 'react'\n// import Header from '../../composants/Header'\n// import HeaderContent from '../../composants/HeaderContent'\n// import Footer from '../../composants/Footer'\n// import './QuestionCSS.css';\n\n// const QuestionReponseChrono = () => {\n//     return (\n//         <>\n//             <Header />\n//             <HeaderContent />\n//             <div className='containeur'>\n//                 <h1 className='containeur'>TEST D'EVALUATION DES LEADERS</h1>\n//                 <h3 className=''>Repondre aux questions pour valider l'examain</h3>\n//             </div>\n\n//             <Footer />\n//         </>\n//     )\n// }\n\n// export default QuestionReponseChrono\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionPage = () => {\n  _s();\n  const [questions, setQuestions] = useState([{\n    texte: \"Quelle est la capitale de la France ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }, {\n    texte: \"Combien de continents y a-t-il sur Terre ?\",\n    description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n  }\n  // ... autres questions\n  ]);\n  const [answers, setAnswers] = useState([]);\n  const [remainingTime, setRemainingTime] = useState(60); // 60 secondes par défaut\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (remainingTime > 0) {\n        setRemainingTime(remainingTime - 1);\n      } else {\n        // Délai écoulé\n        alert(\"Le temps imparti pour la question est écoulé !\");\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [remainingTime]);\n  const handleSubmit = (e, questionIndex) => {\n    e.preventDefault();\n    const answer = e.target.answer.value;\n\n    // Envoyer la réponse au serveur ou l'enregistrer localement\n\n    // Mettre à jour la liste des réponses\n    setAnswers([...answers, {\n      questionIndex,\n      answer\n    }]);\n\n    // Réinitialiser le chronomètre\n    setRemainingTime(60);\n\n    // Vider le champ de réponse\n    e.target.answer.value = '';\n    alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Formulaire de r\\xE9ponses aux questions ouvertes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.texte\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temps restant : \", remainingTime, \" secondes\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => handleSubmit(e, index),\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"answer\",\n          children: \"Votre r\\xE9ponse : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"answer\",\n          name: \"answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Valider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this)]\n    }, question.texte, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionPage, \"RkzjfMbhQPrEXdP8jwLDL4K4s20=\");\n_c = QuestionPage;\nexport default QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","QuestionPage","_s","questions","setQuestions","texte","description","answers","setAnswers","remainingTime","setRemainingTime","interval","setInterval","alert","clearInterval","handleSubmit","e","questionIndex","preventDefault","answer","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","map","question","index","onSubmit","htmlFor","id","name","type","_c","$RefreshReg$"],"sources":["C:/taff/elearningUI/src/pages/questions/index.jsx"],"sourcesContent":["// import React from 'react'\r\n// import Header from '../../composants/Header'\r\n// import HeaderContent from '../../composants/HeaderContent'\r\n// import Footer from '../../composants/Footer'\r\n// import './QuestionCSS.css';\r\n\r\n// const QuestionReponseChrono = () => {\r\n//     return (\r\n//         <>\r\n//             <Header />\r\n//             <HeaderContent />\r\n//             <div className='containeur'>\r\n//                 <h1 className='containeur'>TEST D'EVALUATION DES LEADERS</h1>\r\n//                 <h3 className=''>Repondre aux questions pour valider l'examain</h3>\r\n//             </div>\r\n\r\n//             <Footer />\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default QuestionReponseChrono\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst QuestionPage = () => {\r\n    const [questions, setQuestions] = useState([\r\n        {\r\n            texte: \"Quelle est la capitale de la France ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        {\r\n            texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n            description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n        },\r\n        // ... autres questions\r\n    ]);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [remainingTime, setRemainingTime] = useState(60); // 60 secondes par défaut\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (remainingTime > 0) {\r\n                setRemainingTime(remainingTime - 1);\r\n            } else {\r\n                // Délai écoulé\r\n                alert(\"Le temps imparti pour la question est écoulé !\");\r\n            }\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [remainingTime]);\r\n\r\n    const handleSubmit = (e, questionIndex) => {\r\n        e.preventDefault();\r\n\r\n        const answer = e.target.answer.value;\r\n\r\n        // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n        // Mettre à jour la liste des réponses\r\n        setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n        // Réinitialiser le chronomètre\r\n        setRemainingTime(60);\r\n\r\n        // Vider le champ de réponse\r\n        e.target.answer.value = '';\r\n\r\n        alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Formulaire de réponses aux questions ouvertes</h1>\r\n            {questions.map((question, index) => (\r\n                <div key={question.texte}>\r\n                    <h2>{question.texte}</h2>\r\n                    <p>{question.description}</p>\r\n                    <p>Temps restant : {remainingTime} secondes</p>\r\n                    <form onSubmit={(e) => handleSubmit(e, index)}>\r\n                        <label htmlFor=\"answer\">Votre réponse : </label>\r\n                        <textarea id=\"answer\" name=\"answer\" />\r\n                        <button type=\"submit\">Valider</button>\r\n                    </form>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}