{"ast":null,"code":"var _jsxFileName = \"C:\\\\taff\\\\elearningUI\\\\src\\\\pages\\\\questions\\\\QuestionPage.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect, useRef } from 'react';\n// // import './QuestionCSS.css'; // Importer le fichier CSS\n\n// // const QuestionPage = () => {\n// //     const [questions, setQuestions] = useState([\n// //         {\n// //             texte: \"Quelle est la capitale de la France ?\",\n// //             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n// //         },\n// //         {\n// //             texte: \"Combien de continents y a-t-il sur Terre ?\",\n// //             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n// //         },\n// //         // ... autres questions\n// //     ]);\n// //     const [answers, setAnswers] = useState([]);\n// //     const [remainingTimes, setRemainingTimes] = useState(\n// //         questions.map(() => 60) // 60 secondes par défaut pour chaque question\n// //     );\n// //     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n// //     const questionRefs = useRef(Array(questions.length).fill(null));\n\n// //     useEffect(() => {\n// //         const intervals = questions.map((_, index) => {\n// //             return setInterval(() => {\n// //                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\n// //                     setRemainingTimes((prevRemainingTimes) => {\n// //                         const newRemainingTimes = [...prevRemainingTimes];\n// //                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n// //                         return newRemainingTimes;\n// //                     });\n// //                 } else if (remainingTimes[index] === 0) {\n// //                     // Délai écoulé\n// //                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n// //                     setIsTimerActive((prevIsTimerActive) => {\n// //                         const newIsTimerActive = [...prevIsTimerActive];\n// //                         newIsTimerActive[index] = false;\n// //                         return newIsTimerActive;\n// //                     });\n// //                 }\n// //             }, 1000);\n// //         });\n\n// //         return () => intervals.forEach((interval) => clearInterval(interval));\n// //     }, [remainingTimes, isTimerActive]);\n\n// //     const handleStartTimer = (questionIndex) => {\n// //         setIsTimerActive((prevIsTimerActive) => {\n// //             const newIsTimerActive = [...prevIsTimerActive];\n// //             newIsTimerActive[questionIndex] = true;\n// //             return newIsTimerActive;\n// //         });\n// //         questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\n// //     };\n\n// //     const handleSubmit = (e, questionIndex) => {\n// //         e.preventDefault();\n\n// //         const answer = e.target.answer.value;\n\n// //         // Envoyer la réponse au serveur ou l'enregistrer localement\n\n// //         // Mettre à jour la liste des réponses\n// //         setAnswers([...answers, { questionIndex, answer }]);\n\n// //         // Réinitialiser le chronomètre\n// //         setRemainingTimes((prevRemainingTimes) => {\n// //             const newRemainingTimes = [...prevRemainingTimes];\n// //             newRemainingTimes[questionIndex] = 60;\n// //             return newRemainingTimes;\n// //         });\n\n// //         // Vider le champ de réponse\n// //         e.target.answer.value = '';\n\n// //         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n// //         setIsTimerActive((prevIsTimerActive) => {\n// //             const newIsTimerActive = [...prevIsTimerActive];\n// //             newIsTimerActive[questionIndex] = false;\n// //             return newIsTimerActive;\n// //         });\n// //     };\n\n// //     return (\n// //         <div className=\"question-page\">\n// //             <h1>Formulaire de réponses aux questions ouvertes</h1>\n// //             {questions.map((question, index) => (\n// //                 <div key={question.texte} className=\"question-container\">\n// //                     <h2>{question.texte}</h2>\n// //                     <p>{question.description}</p>\n// //                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\n// //                     <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\n// //                     {isTimerActive[index] && (\n// //                         <form onSubmit={(e) => handleSubmit(e, index)}>\n// //                             <label htmlFor=\"answer\">Votre réponse : </label>\n// //                             <textarea\n// //                                 id=\"answer\"\n// //                                 name=\"answer\"\n// //                                 ref={questionRefs.current[index]}\n// //                                 className=\"answer-field\"\n// //                             />\n// //                             <button type=\"submit\" className=\"submit-button\">Valider</button>\n// //                         </form>\n// //                     )}\n// //                 </div>\n// //             ))}\n// //         </div>\n// //     );\n// // };\n\n// // export default QuestionPage;\n\n// import React, { useState, useEffect, useRef } from 'react';\n// import './QuestionCSS.css'; // Importer le fichier CSS\n\n// const QuestionPage = () => {\n//     const [questions, setQuestions] = useState([\n//         {\n//             texte: \"Quelle est la capitale du Cameroun?\",\n//             description: \"Appuyer et repondre a la question vous avez 2 min.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         // ... autres questions\n//     ]);\n//     const [answers, setAnswers] = useState([]);\n//     const [remainingTimes, setRemainingTimes] = useState(\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\n//     );\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n//     const questionRefs = useRef(Array(questions.length).fill(null));\n//     const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\n\n//     useEffect(() => {\n//         const intervals = questions.map((_, index) => {\n//             return setInterval(() => {\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\n//                     setRemainingTimes((prevRemainingTimes) => {\n//                         const newRemainingTimes = [...prevRemainingTimes];\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n//                         return newRemainingTimes;\n//                     });\n//                 } else if (remainingTimes[index] === 0) {\n//                     // Délai écoulé\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n//                     setIsTimerActive((prevIsTimerActive) => {\n//                         const newIsTimerActive = [...prevIsTimerActive];\n//                         newIsTimerActive[index] = false;\n//                         return newIsTimerActive;\n//                     });\n//                     setIsQuestionLocked((prevIsQuestionLocked) => {\n//                         const newIsQuestionLocked = [...prevIsQuestionLocked];\n//                         newIsQuestionLocked[index] = true;\n//                         return newIsQuestionLocked;\n//                     });\n//                 }\n//             }, 1000);\n//         });\n\n//         return () => intervals.forEach((interval) => clearInterval(interval));\n//     }, [remainingTimes, isTimerActive]);\n\n//     const handleStartTimer = (questionIndex) => {\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = true;\n//             return newIsTimerActive;\n//         });\n//         // Focus sur le champ de réponse\n//     };\n\n//     const handleSubmit = (e, questionIndex) => {\n//         e.preventDefault();\n\n//         const answer = e.target.answer.value;\n\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\n\n//         // Mettre à jour la liste des réponses\n//         setAnswers([...answers, { questionIndex, answer }]);\n\n//         // Réinitialiser le chronomètre\n//         setRemainingTimes((prevRemainingTimes) => {\n//             const newRemainingTimes = [...prevRemainingTimes];\n//             newRemainingTimes[questionIndex] = 60;\n//             return newRemainingTimes;\n//         });\n\n//         // Vider le champ de réponse\n//         e.target.answer.value = '';\n\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = false;\n//             return newIsTimerActive;\n//         });\n//         setIsQuestionLocked((prevIsQuestionLocked) => {\n//             const newIsQuestionLocked = [...prevIsQuestionLocked];\n//             newIsQuestionLocked[questionIndex] = true;\n//             return newIsQuestionLocked;\n//         });\n//     };\n\n//     return (\n//         <div className=\"question-page\">\n//             {questions.map((question, index) => (\n//                 <div key={question.texte} className=\"question-container\">\n//                     <h2 className='texte'>{question.texte}</h2>\n//                     <p>{question.description}</p>\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\n//                     <button\n//                         onClick={() => handleStartTimer(index)}\n//                         className=\"start-button\"\n//                         disabled={isQuestionLocked[index]}\n//                     >\n//                         Démarrer le chronomètre\n//                     </button>\n//                     {isTimerActive[index] && !isQuestionLocked[index] && (\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\n//                             <textarea\n//                                 id=\"answer\"\n//                                 name=\"answer\"\n//                                 ref={questionRefs.current[index]}\n//                                 className=\"answer-field\"\n//                                 disabled={isQuestionLocked[index]}\n//                             />\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\n//                         </form>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default QuestionPage;\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Timer from \"./Timer\";\nimport './QuestionCSS.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 800,\n    margin: \"0 auto\",\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \"bold\"\n  },\n  description: {\n    fontSize: 16,\n    marginBottom: 20\n  },\n  question: {\n    fontSize: 18,\n    marginBottom: 10\n  },\n  answers: {\n    listStyle: \"none\",\n    padding: 0\n  },\n  answer: {\n    marginBottom: 10\n  },\n  button: {\n    marginTop: 20\n  }\n});\nconst QuestionPage = () => {\n  _s();\n  const [currentPart, setCurrentPart] = useState(0);\n  const [answers, setAnswers] = useState([]);\n  const [timeLeft, setTimeLeft] = useState(120);\n  const questions = [{\n    title: \"Partie 1\",\n    description: \"Ceci est la description de la partie 1\",\n    questions: [{\n      type: \"reponse_courte\",\n      text: \"Question 1 ?\"\n    }, {\n      type: \"reponse_courte\",\n      text: \"Question 2 ?\"\n    }]\n  }, {\n    title: \"Partie 2\",\n    description: \"Ceci est la description de la partie 2\",\n    questions: [{\n      type: \"reponse_courte\",\n      text: \"Question 3 ?\"\n    }, {\n      type: \"reponse_courte\",\n      text: \"Question 4 ?\"\n    }]\n  }];\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimeLeft(prevTime => prevTime - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [timeLeft]);\n  const handleAnswerSubmit = answer => {\n    setAnswers([...answers, answer]);\n    setCurrentPart(prevPart => prevPart + 1);\n    setTimeLeft(120);\n  };\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h1\",\n      className: classes.title,\n      children: questions[currentPart].title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      className: classes.description,\n      children: questions[currentPart].description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 13\n    }, this), questions[currentPart].questions.map(question => /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.question,\n      children: [timeLeft > 0 ? /*#__PURE__*/_jsxDEV(TextField, {\n        multiline: true,\n        rows: 4,\n        variant: \"outlined\",\n        className: classes.answer,\n        onChange: e => handleAnswerSubmit(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n        multiline: true,\n        rows: 4,\n        variant: \"outlined\",\n        className: classes.answer,\n        disabled: true,\n        style: {\n          backgroundColor: \"#ddd\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Timer, {\n        timeLeft: timeLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }, this)]\n    }, question.text, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      onClick: () => setCurrentPart(prevPart => prevPart + 1),\n      children: \"Suivant\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionPage, \"XeXVIx3Dg+5huuBE8/xTj+eGZPM=\", false, function () {\n  return [useStyles];\n});\n_c = QuestionPage;\nexport default QuestionPage;\nvar _c;\n$RefreshReg$(_c, \"QuestionPage\");","map":{"version":3,"names":["React","useState","useEffect","makeStyles","Typography","Paper","TextField","Button","Timer","jsxDEV","_jsxDEV","useStyles","root","maxWidth","margin","padding","title","fontSize","fontWeight","description","marginBottom","question","answers","listStyle","answer","button","marginTop","QuestionPage","_s","currentPart","setCurrentPart","setAnswers","timeLeft","setTimeLeft","questions","type","text","interval","setInterval","prevTime","clearInterval","handleAnswerSubmit","prevPart","classes","className","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","map","multiline","rows","onChange","e","target","value","disabled","style","backgroundColor","color","onClick","_c","$RefreshReg$"],"sources":["C:/taff/elearningUI/src/pages/questions/QuestionPage.jsx"],"sourcesContent":["\r\n// // import React, { useState, useEffect, useRef } from 'react';\r\n// // import './QuestionCSS.css'; // Importer le fichier CSS\r\n\r\n// // const QuestionPage = () => {\r\n// //     const [questions, setQuestions] = useState([\r\n// //         {\r\n// //             texte: \"Quelle est la capitale de la France ?\",\r\n// //             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n// //         },\r\n// //         {\r\n// //             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n// //             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n// //         },\r\n// //         // ... autres questions\r\n// //     ]);\r\n// //     const [answers, setAnswers] = useState([]);\r\n// //     const [remainingTimes, setRemainingTimes] = useState(\r\n// //         questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n// //     );\r\n// //     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n// //     const questionRefs = useRef(Array(questions.length).fill(null));\r\n\r\n// //     useEffect(() => {\r\n// //         const intervals = questions.map((_, index) => {\r\n// //             return setInterval(() => {\r\n// //                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n// //                     setRemainingTimes((prevRemainingTimes) => {\r\n// //                         const newRemainingTimes = [...prevRemainingTimes];\r\n// //                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n// //                         return newRemainingTimes;\r\n// //                     });\r\n// //                 } else if (remainingTimes[index] === 0) {\r\n// //                     // Délai écoulé\r\n// //                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n// //                     setIsTimerActive((prevIsTimerActive) => {\r\n// //                         const newIsTimerActive = [...prevIsTimerActive];\r\n// //                         newIsTimerActive[index] = false;\r\n// //                         return newIsTimerActive;\r\n// //                     });\r\n// //                 }\r\n// //             }, 1000);\r\n// //         });\r\n\r\n// //         return () => intervals.forEach((interval) => clearInterval(interval));\r\n// //     }, [remainingTimes, isTimerActive]);\r\n\r\n// //     const handleStartTimer = (questionIndex) => {\r\n// //         setIsTimerActive((prevIsTimerActive) => {\r\n// //             const newIsTimerActive = [...prevIsTimerActive];\r\n// //             newIsTimerActive[questionIndex] = true;\r\n// //             return newIsTimerActive;\r\n// //         });\r\n// //         questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\r\n// //     };\r\n\r\n// //     const handleSubmit = (e, questionIndex) => {\r\n// //         e.preventDefault();\r\n\r\n// //         const answer = e.target.answer.value;\r\n\r\n// //         // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n// //         // Mettre à jour la liste des réponses\r\n// //         setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n// //         // Réinitialiser le chronomètre\r\n// //         setRemainingTimes((prevRemainingTimes) => {\r\n// //             const newRemainingTimes = [...prevRemainingTimes];\r\n// //             newRemainingTimes[questionIndex] = 60;\r\n// //             return newRemainingTimes;\r\n// //         });\r\n\r\n// //         // Vider le champ de réponse\r\n// //         e.target.answer.value = '';\r\n\r\n// //         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n// //         setIsTimerActive((prevIsTimerActive) => {\r\n// //             const newIsTimerActive = [...prevIsTimerActive];\r\n// //             newIsTimerActive[questionIndex] = false;\r\n// //             return newIsTimerActive;\r\n// //         });\r\n// //     };\r\n\r\n// //     return (\r\n// //         <div className=\"question-page\">\r\n// //             <h1>Formulaire de réponses aux questions ouvertes</h1>\r\n// //             {questions.map((question, index) => (\r\n// //                 <div key={question.texte} className=\"question-container\">\r\n// //                     <h2>{question.texte}</h2>\r\n// //                     <p>{question.description}</p>\r\n// //                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n// //                     <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\r\n// //                     {isTimerActive[index] && (\r\n// //                         <form onSubmit={(e) => handleSubmit(e, index)}>\r\n// //                             <label htmlFor=\"answer\">Votre réponse : </label>\r\n// //                             <textarea\r\n// //                                 id=\"answer\"\r\n// //                                 name=\"answer\"\r\n// //                                 ref={questionRefs.current[index]}\r\n// //                                 className=\"answer-field\"\r\n// //                             />\r\n// //                             <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n// //                         </form>\r\n// //                     )}\r\n// //                 </div>\r\n// //             ))}\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default QuestionPage;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import './QuestionCSS.css'; // Importer le fichier CSS\r\n\r\n// const QuestionPage = () => {\r\n//     const [questions, setQuestions] = useState([\r\n//         {\r\n//             texte: \"Quelle est la capitale du Cameroun?\",\r\n//             description: \"Appuyer et repondre a la question vous avez 2 min.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         // ... autres questions\r\n//     ]);\r\n//     const [answers, setAnswers] = useState([]);\r\n//     const [remainingTimes, setRemainingTimes] = useState(\r\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n//     );\r\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n//     const questionRefs = useRef(Array(questions.length).fill(null));\r\n//     const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\r\n\r\n//     useEffect(() => {\r\n//         const intervals = questions.map((_, index) => {\r\n//             return setInterval(() => {\r\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n//                     setRemainingTimes((prevRemainingTimes) => {\r\n//                         const newRemainingTimes = [...prevRemainingTimes];\r\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n//                         return newRemainingTimes;\r\n//                     });\r\n//                 } else if (remainingTimes[index] === 0) {\r\n//                     // Délai écoulé\r\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n//                     setIsTimerActive((prevIsTimerActive) => {\r\n//                         const newIsTimerActive = [...prevIsTimerActive];\r\n//                         newIsTimerActive[index] = false;\r\n//                         return newIsTimerActive;\r\n//                     });\r\n//                     setIsQuestionLocked((prevIsQuestionLocked) => {\r\n//                         const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n//                         newIsQuestionLocked[index] = true;\r\n//                         return newIsQuestionLocked;\r\n//                     });\r\n//                 }\r\n//             }, 1000);\r\n//         });\r\n\r\n//         return () => intervals.forEach((interval) => clearInterval(interval));\r\n//     }, [remainingTimes, isTimerActive]);\r\n\r\n//     const handleStartTimer = (questionIndex) => {\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = true;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         // Focus sur le champ de réponse\r\n//     };\r\n\r\n//     const handleSubmit = (e, questionIndex) => {\r\n//         e.preventDefault();\r\n\r\n//         const answer = e.target.answer.value;\r\n\r\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n//         // Mettre à jour la liste des réponses\r\n//         setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n//         // Réinitialiser le chronomètre\r\n//         setRemainingTimes((prevRemainingTimes) => {\r\n//             const newRemainingTimes = [...prevRemainingTimes];\r\n//             newRemainingTimes[questionIndex] = 60;\r\n//             return newRemainingTimes;\r\n//         });\r\n\r\n//         // Vider le champ de réponse\r\n//         e.target.answer.value = '';\r\n\r\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = false;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         setIsQuestionLocked((prevIsQuestionLocked) => {\r\n//             const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n//             newIsQuestionLocked[questionIndex] = true;\r\n//             return newIsQuestionLocked;\r\n//         });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"question-page\">\r\n//             {questions.map((question, index) => (\r\n//                 <div key={question.texte} className=\"question-container\">\r\n//                     <h2 className='texte'>{question.texte}</h2>\r\n//                     <p>{question.description}</p>\r\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n//                     <button\r\n//                         onClick={() => handleStartTimer(index)}\r\n//                         className=\"start-button\"\r\n//                         disabled={isQuestionLocked[index]}\r\n//                     >\r\n//                         Démarrer le chronomètre\r\n//                     </button>\r\n//                     {isTimerActive[index] && !isQuestionLocked[index] && (\r\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\r\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\r\n//                             <textarea\r\n//                                 id=\"answer\"\r\n//                                 name=\"answer\"\r\n//                                 ref={questionRefs.current[index]}\r\n//                                 className=\"answer-field\"\r\n//                                 disabled={isQuestionLocked[index]}\r\n//                             />\r\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n//                         </form>\r\n//                     )}\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default QuestionPage;\r\n\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Timer from \"./Timer\";\r\nimport './QuestionCSS.css';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 800,\r\n        margin: \"0 auto\",\r\n        padding: 20,\r\n    },\r\n    title: {\r\n        fontSize: 24,\r\n        fontWeight: \"bold\",\r\n    },\r\n    description: {\r\n        fontSize: 16,\r\n        marginBottom: 20,\r\n    },\r\n    question: {\r\n        fontSize: 18,\r\n        marginBottom: 10,\r\n    },\r\n    answers: {\r\n        listStyle: \"none\",\r\n        padding: 0,\r\n    },\r\n    answer: {\r\n        marginBottom: 10,\r\n    },\r\n    button: {\r\n        marginTop: 20,\r\n    },\r\n});\r\n\r\nconst QuestionPage = () => {\r\n    const [currentPart, setCurrentPart] = useState(0);\r\n    const [answers, setAnswers] = useState([]);\r\n    const [timeLeft, setTimeLeft] = useState(120);\r\n    const questions = [\r\n        {\r\n            title: \"Partie 1\",\r\n            description: \"Ceci est la description de la partie 1\",\r\n            questions: [\r\n                {\r\n                    type: \"reponse_courte\",\r\n                    text: \"Question 1 ?\",\r\n                },\r\n                {\r\n                    type: \"reponse_courte\",\r\n                    text: \"Question 2 ?\",\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            title: \"Partie 2\",\r\n            description: \"Ceci est la description de la partie 2\",\r\n            questions: [\r\n                {\r\n                    type: \"reponse_courte\",\r\n                    text: \"Question 3 ?\",\r\n                },\r\n                {\r\n                    type: \"reponse_courte\",\r\n                    text: \"Question 4 ?\",\r\n                },\r\n            ],\r\n        },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTimeLeft((prevTime) => prevTime - 1);\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, [timeLeft]);\r\n\r\n    const handleAnswerSubmit = (answer) => {\r\n        setAnswers([...answers, answer]);\r\n        setCurrentPart((prevPart) => prevPart + 1);\r\n        setTimeLeft(120);\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography variant=\"h1\" className={classes.title}>\r\n                {questions[currentPart].title}\r\n            </Typography>\r\n            <Typography variant=\"body1\" className={classes.description}>\r\n                {questions[currentPart].description}\r\n            </Typography>\r\n            {questions[currentPart].questions.map((question) => (\r\n                <Paper key={question.text} className={classes.question}>\r\n                    {timeLeft > 0 ? (\r\n                        <TextField\r\n                            multiline\r\n                            rows={4}\r\n                            variant=\"outlined\"\r\n                            className={classes.answer}\r\n                            onChange={(e) => handleAnswerSubmit(e.target.value)}\r\n                        />\r\n                    ) : (\r\n                        <TextField\r\n                            multiline\r\n                            rows={4}\r\n                            variant=\"outlined\"\r\n                            className={classes.answer}\r\n                            disabled\r\n                            style={{ backgroundColor: \"#ddd\" }}\r\n                        />\r\n                    )}\r\n                    <Timer timeLeft={timeLeft} />\r\n                </Paper>\r\n            ))}\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n                onClick={() => setCurrentPart((prevPart) => prevPart + 1)}\r\n            >\r\n                Suivant\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionPage;\r\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}