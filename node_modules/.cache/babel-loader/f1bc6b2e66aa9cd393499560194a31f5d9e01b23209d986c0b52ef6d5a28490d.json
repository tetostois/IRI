{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n//import { ServeurContext } from '../../../App';\n\nexport function useFetch(url, method, body, param, update, isMultipart) {\n  _s();\n  const serveur = \"http://localhost:9006/elearningapi\";\n  const [data, setData] = useState({});\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  // const [send, setsend] = useState(true);\n  //console.log(\"==Serveur Context==\", serveur);\n\n  useEffect(() => {\n    if (!url) return;\n    setLoading(true);\n    setError(false);\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", isMultipart ? \"multipart/form-data\" : \"application/json\");\n    myHeaders.append(\"Connection\", \"Keep-alive\");\n    const username = \"admin\";\n    const password = \"passwordadmin237\";\n    const base64Credentials = btoa(username + \":\" + password); // Encode en base64\n\n    myHeaders.append(\"Authorization\", \"Basic \" + base64Credentials);\n    let formData = new FormData();\n    formData.append(\"image\", body);\n    //formData.append('username', 'Chris');\n\n    var myInit = {\n      method: method ? method : \"GET\",\n      headers: myHeaders,\n      mode: 'cors',\n      cache: 'default',\n      body: body ? JSON.stringify(body) : null\n    };\n    var myHeadersMultipart = new Headers();\n    myHeadersMultipart.append(\"Connection\", \"Keep-alive\");\n    var myInitMultipart = {\n      method: method ? method : \"GET\",\n      headers: myHeadersMultipart,\n      mode: 'no-cors',\n      cache: 'default',\n      body: formData\n    };\n    const allPath = serveur + url + (param ? param : \"\");\n    if (isMultipart) {\n      myInit = myInitMultipart;\n    }\n    async function fetchData() {\n      try {\n        const response = await fetch(allPath, myInit);\n        if (!isMultipart) {\n          const data = await response.json();\n          setData(data);\n          if (data.timestamp && data.status) {\n            console.log(\"==Une erreur serveur ==\", data);\n            setError(true);\n          }\n        }\n      } catch (err) {\n        console.log(err);\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchData();\n  }, [url, method, body, param, update, isMultipart, serveur]);\n  return {\n    isLoading,\n    data,\n    error\n  };\n}\n_s(useFetch, \"I3PlMlwpe/K4XMhtkGOVndNNG2k=\");","map":{"version":3,"names":["useState","useEffect","useFetch","url","method","body","param","update","isMultipart","_s","serveur","data","setData","isLoading","setLoading","error","setError","myHeaders","Headers","append","username","password","base64Credentials","btoa","formData","FormData","myInit","headers","mode","cache","JSON","stringify","myHeadersMultipart","myInitMultipart","allPath","fetchData","response","fetch","json","timestamp","status","console","log","err"],"sources":["C:/taff/elearningUI/src/utils/hooks/FetchData/index.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n//import { ServeurContext } from '../../../App';\r\n\r\n\r\nexport function useFetch(url, method, body, param, update, isMultipart) {\r\n    const serveur = \"http://localhost:9006/elearningapi\";\r\n    const [data, setData] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n    // const [send, setsend] = useState(true);\r\n    //console.log(\"==Serveur Context==\", serveur);\r\n\r\n    useEffect(() => {\r\n        if (!url) return;\r\n\r\n        setLoading(true)\r\n        setError(false)\r\n        var myHeaders = new Headers();\r\n        myHeaders.append(\"Content-Type\", isMultipart ? \"multipart/form-data\" : \"application/json\");\r\n        myHeaders.append(\"Connection\", \"Keep-alive\");\r\n\r\n\r\n        const username = \"admin\";\r\n        const password = \"passwordadmin237\";\r\n        const base64Credentials = btoa(username + \":\" + password); // Encode en base64\r\n\r\n        myHeaders.append(\"Authorization\", \"Basic \" + base64Credentials);\r\n\r\n        let formData = new FormData();\r\n\r\n        formData.append(\"image\", body);\r\n        //formData.append('username', 'Chris');\r\n\r\n        var myInit = {\r\n            method: (method ? method : \"GET\"),\r\n            headers: myHeaders,\r\n            mode: 'cors',\r\n            cache: 'default',\r\n            body: (body ? JSON.stringify(body) : null)\r\n        };\r\n\r\n        var myHeadersMultipart = new Headers();\r\n        myHeadersMultipart.append(\"Connection\", \"Keep-alive\");\r\n        var myInitMultipart = {\r\n            method: (method ? method : \"GET\"),\r\n            headers: myHeadersMultipart,\r\n            mode: 'no-cors',\r\n            cache: 'default',\r\n            body: formData,\r\n\r\n        };\r\n\r\n        const allPath = serveur + url + (param ? param : \"\");\r\n\r\n        if (isMultipart) {\r\n            myInit = myInitMultipart;\r\n        }\r\n\r\n        async function fetchData() {\r\n            try {\r\n                const response = await fetch(allPath, myInit);\r\n                if (!isMultipart) {\r\n                    const data = await response.json();\r\n                    setData(data);\r\n                    if (data.timestamp && data.status) {\r\n                        console.log(\"==Une erreur serveur ==\", data);\r\n                        setError(true);\r\n                    }\r\n                }\r\n            } catch (err) {\r\n                console.log(err);\r\n                setError(true);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        }\r\n        fetchData();\r\n\r\n    }, [url, method, body, param, update, isMultipart, serveur])\r\n    return { isLoading, data, error };\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}