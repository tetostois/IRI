{"ast":null,"code":"var _jsxFileName = \"C:\\\\taff\\\\elearningUI\\\\src\\\\pages\\\\questions\\\\QuestionPage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from 'react';\n// import './QuestionCSS.css'; // Importer le fichier CSS\n\n// const QuestionPage = () => {\n//     const [questions, setQuestions] = useState([\n//         {\n//             texte: \"Quelle est la capitale de la France ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         // ... autres questions\n//     ]);\n//     const [answers, setAnswers] = useState([]);\n//     const [remainingTimes, setRemainingTimes] = useState(\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\n//     );\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n//     const questionRefs = useRef(Array(questions.length).fill(null));\n\n//     useEffect(() => {\n//         const intervals = questions.map((_, index) => {\n//             return setInterval(() => {\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\n//                     setRemainingTimes((prevRemainingTimes) => {\n//                         const newRemainingTimes = [...prevRemainingTimes];\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n//                         return newRemainingTimes;\n//                     });\n//                 } else if (remainingTimes[index] === 0) {\n//                     // Délai écoulé\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n//                     setIsTimerActive((prevIsTimerActive) => {\n//                         const newIsTimerActive = [...prevIsTimerActive];\n//                         newIsTimerActive[index] = false;\n//                         return newIsTimerActive;\n//                     });\n//                 }\n//             }, 1000);\n//         });\n\n//         return () => intervals.forEach((interval) => clearInterval(interval));\n//     }, [remainingTimes, isTimerActive]);\n\n//     const handleStartTimer = (questionIndex) => {\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = true;\n//             return newIsTimerActive;\n//         });\n//         questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\n//     };\n\n//     const handleSubmit = (e, questionIndex) => {\n//         e.preventDefault();\n\n//         const answer = e.target.answer.value;\n\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\n\n//         // Mettre à jour la liste des réponses\n//         setAnswers([...answers, { questionIndex, answer }]);\n\n//         // Réinitialiser le chronomètre\n//         setRemainingTimes((prevRemainingTimes) => {\n//             const newRemainingTimes = [...prevRemainingTimes];\n//             newRemainingTimes[questionIndex] = 60;\n//             return newRemainingTimes;\n//         });\n\n//         // Vider le champ de réponse\n//         e.target.answer.value = '';\n\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = false;\n//             return newIsTimerActive;\n//         });\n//     };\n\n//     return (\n//         <div className=\"question-page\">\n//             <h1>Formulaire de réponses aux questions ouvertes</h1>\n//             {questions.map((question, index) => (\n//                 <div key={question.texte} className=\"question-container\">\n//                     <h2>{question.texte}</h2>\n//                     <p>{question.description}</p>\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\n//                     <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\n//                     {isTimerActive[index] && (\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\n//                             <textarea\n//                                 id=\"answer\"\n//                                 name=\"answer\"\n//                                 ref={questionRefs.current[index]}\n//                                 className=\"answer-field\"\n//                             />\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\n//                         </form>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default QuestionPage;\n\n// import React, { useState, useEffect, useRef } from 'react';\n\n// const QuestionPage = () => {\n//     const [questions, setQuestions] = useState([\n//         {\n//             texte: \"Démontrez la pertinence technologique de la civilisation africaine avant le début de la colonisation\",\n//             description: \"Appuyer et repondre a la question vous avez 2 min.\"\n//         },\n//         {\n//             texte: \"Démontrez les caractéristiques qui font de la civilisation africaine une civilisation compétitive sur le plan National et International\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Au-dela du relativisme, quelles sont les erreurs que la communauté Internationale commet et que vous ne devez absolument pas suivre, dans les domaines: des comportements humains, des décisions culturelles, des décisions sociales, économiques, politiques et financières \",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Quelles sont les limites de la civilisations occidentale que l'Afrique peut se proposer de résoudre?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Comment l'Afrique peut-elle se positionner aujour'hui dans le monde, quelle valeurs ajoutée peut-elle créer et quel impact?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"A partir de votre filière ou secteur d'apprentisage comment peut-elle etre Leader mondial?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"En quoi la décision déimmigrer vers un Pays étranger peut-elle etre un échec de Leadership pour l'étudiant face à  \",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//         {\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\n//         },\n//     ]);\n//     const [answers, setAnswers] = useState([]);\n//     const [remainingTimes, setRemainingTimes] = useState(\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\n//     );\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\n//     const questionRefs = useRef(Array(questions.length).fill(null));\n//     const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\n\n//     useEffect(() => {\n//         const intervals = questions.map((_, index) => {\n//             return setInterval(() => {\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\n//                     setRemainingTimes((prevRemainingTimes) => {\n//                         const newRemainingTimes = [...prevRemainingTimes];\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\n//                         return newRemainingTimes;\n//                     });\n//                 } else if (remainingTimes[index] === 0) {\n//                     // Délai écoulé\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\n//                     setIsTimerActive((prevIsTimerActive) => {\n//                         const newIsTimerActive = [...prevIsTimerActive];\n//                         newIsTimerActive[index] = false;\n//                         return newIsTimerActive;\n//                     });\n//                     setIsQuestionLocked((prevIsQuestionLocked) => {\n//                         const newIsQuestionLocked = [...prevIsQuestionLocked];\n//                         newIsQuestionLocked[index] = true;\n//                         return newIsQuestionLocked;\n//                     });\n//                 }\n//             }, 1000);\n//         });\n\n//         return () => intervals.forEach((interval) => clearInterval(interval));\n//     }, [remainingTimes, isTimerActive]);\n\n//     const handleStartTimer = (questionIndex) => {\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = true;\n//             return newIsTimerActive;\n//         });\n//         // Focus sur le champ de réponse\n//     };\n\n//     const handleSubmit = (e, questionIndex) => {\n//         e.preventDefault();\n\n//         const answer = e.target.answer.value;\n\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\n\n//         // Mettre à jour la liste des réponses\n//         setAnswers([...answers, { questionIndex, answer }]);\n\n//         // Réinitialiser le chronomètre\n//         setRemainingTimes((prevRemainingTimes) => {\n//             const newRemainingTimes = [...prevRemainingTimes];\n//             newRemainingTimes[questionIndex] = 60;\n//             return newRemainingTimes;\n//         });\n\n//         // Vider le champ de réponse\n//         e.target.answer.value = '';\n\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\n//         setIsTimerActive((prevIsTimerActive) => {\n//             const newIsTimerActive = [...prevIsTimerActive];\n//             newIsTimerActive[questionIndex] = false;\n//             return newIsTimerActive;\n//         });\n//         setIsQuestionLocked((prevIsQuestionLocked) => {\n//             const newIsQuestionLocked = [...prevIsQuestionLocked];\n//             newIsQuestionLocked[questionIndex] = true;\n//             return newIsQuestionLocked;\n//         });\n//     };\n\n//     return (\n//         <div className=\"question-page\">\n//             {questions.map((question, index) => (\n//                 <div key={question.texte} className=\"question-container\">\n//                     <h2 className='texte'>{question.texte}</h2>\n//                     <p className='question'>{question.description}</p>\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\n//                     <button\n//                         onClick={() => handleStartTimer(index)}\n//                         className=\"start-button\"\n//                         disabled={isQuestionLocked[index]}\n//                     >\n//                         Démarrer le chronomètre\n//                     </button>\n//                     {isTimerActive[index] && !isQuestionLocked[index] && (\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\n//                             <textarea\n//                                 id=\"answer\"\n//                                 name=\"answer\"\n//                                 ref={questionRefs.current[index]}\n//                                 className=\"answer-field\"\n//                                 disabled={isQuestionLocked[index]}\n//                             />\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\n//                         </form>\n//                     )}\n//                 </div>\n//             ))}\n//         </div>\n//     );\n// };\n\n// export default QuestionPage;\n\nimport React, { useState, useEffect } from 'react';\n\n// Exemple de composant Questions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionsComponent = () => {\n  _s();\n  const [questions, setQuestions] = useState([]); // Liste des questions\n  const [answers, setAnswers] = useState({}); // Réponses de l'utilisateur\n  const [timer, setTimer] = useState(7200); // Chronomètre en secondes (2 heures)\n\n  // Fonction pour charger les questions depuis la base de données (simulé ici)\n  const loadQuestions = async () => {\n    // Remplacez cette partie par votre logique de récupération des questions depuis MongoDB\n    const fetchedQuestions = await fetchQuestionsFromDatabase();\n    setQuestions(fetchedQuestions);\n  };\n\n  // Fonction pour enregistrer les réponses dans la base de données (simulé ici)\n  const saveAnswersToDatabase = async () => {\n    // Remplacez cette partie par votre logique d'enregistrement des réponses dans MongoDB\n    await saveAnswersToMongoDB(answers);\n  };\n\n  // Fonction pour gérer le chronomètre\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer(prevTimer => prevTimer - 1);\n    }, 1000);\n\n    // Lorsque le chronomètre atteint 0, enregistrez les réponses\n    if (timer === 0) {\n      saveAnswersToDatabase();\n    }\n    return () => clearInterval(interval);\n  }, [timer]);\n\n  // Fonction pour gérer la saisie des réponses\n  const handleAnswerChange = (questionId, answer) => {\n    setAnswers(prevAnswers => ({\n      ...prevAnswers,\n      [questionId]: answer\n    }));\n  };\n\n  // Chargez les questions au montage du composant\n  useEffect(() => {\n    loadQuestions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Questions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Temps restant : \", Math.floor(timer / 60), \" minutes \", timer % 60, \" secondes\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }, this), questions.map(question => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: answers[question.id] || '',\n        onChange: e => handleAnswerChange(question.id, e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 21\n      }, this)]\n    }, question.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 9\n  }, this);\n};\n_s(QuestionsComponent, \"IxYm9/r1QYOphD3QP5xGqKtaBZo=\");\n_c = QuestionsComponent;\nexport default QuestionsComponent;\nvar _c;\n$RefreshReg$(_c, \"QuestionsComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","QuestionsComponent","_s","questions","setQuestions","answers","setAnswers","timer","setTimer","loadQuestions","fetchedQuestions","fetchQuestionsFromDatabase","saveAnswersToDatabase","saveAnswersToMongoDB","interval","setInterval","prevTimer","clearInterval","handleAnswerChange","questionId","answer","prevAnswers","children","fileName","_jsxFileName","lineNumber","columnNumber","Math","floor","map","question","text","type","value","id","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/taff/elearningUI/src/pages/questions/QuestionPage.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n// import './QuestionCSS.css'; // Importer le fichier CSS\r\n\r\n// const QuestionPage = () => {\r\n//     const [questions, setQuestions] = useState([\r\n//         {\r\n//             texte: \"Quelle est la capitale de la France ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         // ... autres questions\r\n//     ]);\r\n//     const [answers, setAnswers] = useState([]);\r\n//     const [remainingTimes, setRemainingTimes] = useState(\r\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n//     );\r\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n//     const questionRefs = useRef(Array(questions.length).fill(null));\r\n\r\n//     useEffect(() => {\r\n//         const intervals = questions.map((_, index) => {\r\n//             return setInterval(() => {\r\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n//                     setRemainingTimes((prevRemainingTimes) => {\r\n//                         const newRemainingTimes = [...prevRemainingTimes];\r\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n//                         return newRemainingTimes;\r\n//                     });\r\n//                 } else if (remainingTimes[index] === 0) {\r\n//                     // Délai écoulé\r\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n//                     setIsTimerActive((prevIsTimerActive) => {\r\n//                         const newIsTimerActive = [...prevIsTimerActive];\r\n//                         newIsTimerActive[index] = false;\r\n//                         return newIsTimerActive;\r\n//                     });\r\n//                 }\r\n//             }, 1000);\r\n//         });\r\n\r\n//         return () => intervals.forEach((interval) => clearInterval(interval));\r\n//     }, [remainingTimes, isTimerActive]);\r\n\r\n//     const handleStartTimer = (questionIndex) => {\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = true;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         questionRefs.current[questionIndex].focus(); // Focus sur le champ de réponse\r\n//     };\r\n\r\n//     const handleSubmit = (e, questionIndex) => {\r\n//         e.preventDefault();\r\n\r\n//         const answer = e.target.answer.value;\r\n\r\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n//         // Mettre à jour la liste des réponses\r\n//         setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n//         // Réinitialiser le chronomètre\r\n//         setRemainingTimes((prevRemainingTimes) => {\r\n//             const newRemainingTimes = [...prevRemainingTimes];\r\n//             newRemainingTimes[questionIndex] = 60;\r\n//             return newRemainingTimes;\r\n//         });\r\n\r\n//         // Vider le champ de réponse\r\n//         e.target.answer.value = '';\r\n\r\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = false;\r\n//             return newIsTimerActive;\r\n//         });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"question-page\">\r\n//             <h1>Formulaire de réponses aux questions ouvertes</h1>\r\n//             {questions.map((question, index) => (\r\n//                 <div key={question.texte} className=\"question-container\">\r\n//                     <h2>{question.texte}</h2>\r\n//                     <p>{question.description}</p>\r\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n//                     <button onClick={() => handleStartTimer(index)} className=\"start-button\">Démarrer le chronomètre</button>\r\n//                     {isTimerActive[index] && (\r\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\r\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\r\n//                             <textarea\r\n//                                 id=\"answer\"\r\n//                                 name=\"answer\"\r\n//                                 ref={questionRefs.current[index]}\r\n//                                 className=\"answer-field\"\r\n//                             />\r\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n//                         </form>\r\n//                     )}\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default QuestionPage;\r\n\r\n\r\n\r\n// import React, { useState, useEffect, useRef } from 'react';\r\n\r\n\r\n// const QuestionPage = () => {\r\n//     const [questions, setQuestions] = useState([\r\n//         {\r\n//             texte: \"Démontrez la pertinence technologique de la civilisation africaine avant le début de la colonisation\",\r\n//             description: \"Appuyer et repondre a la question vous avez 2 min.\"\r\n//         },\r\n//         {\r\n//             texte: \"Démontrez les caractéristiques qui font de la civilisation africaine une civilisation compétitive sur le plan National et International\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Au-dela du relativisme, quelles sont les erreurs que la communauté Internationale commet et que vous ne devez absolument pas suivre, dans les domaines: des comportements humains, des décisions culturelles, des décisions sociales, économiques, politiques et financières \",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Quelles sont les limites de la civilisations occidentale que l'Afrique peut se proposer de résoudre?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Comment l'Afrique peut-elle se positionner aujour'hui dans le monde, quelle valeurs ajoutée peut-elle créer et quel impact?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"A partir de votre filière ou secteur d'apprentisage comment peut-elle etre Leader mondial?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"En quoi la décision déimmigrer vers un Pays étranger peut-elle etre un échec de Leadership pour l'étudiant face à  \",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//         {\r\n//             texte: \"Combien de continents y a-t-il sur Terre ?\",\r\n//             description: \"Choisissez la bonne réponse parmi les options suivantes.\"\r\n//         },\r\n//     ]);\r\n//     const [answers, setAnswers] = useState([]);\r\n//     const [remainingTimes, setRemainingTimes] = useState(\r\n//         questions.map(() => 60) // 60 secondes par défaut pour chaque question\r\n//     );\r\n//     const [isTimerActive, setIsTimerActive] = useState(Array(questions.length).fill(false));\r\n//     const questionRefs = useRef(Array(questions.length).fill(null));\r\n//     const [isQuestionLocked, setIsQuestionLocked] = useState(Array(questions.length).fill(false));\r\n\r\n//     useEffect(() => {\r\n//         const intervals = questions.map((_, index) => {\r\n//             return setInterval(() => {\r\n//                 if (remainingTimes[index] > 0 && isTimerActive[index]) {\r\n//                     setRemainingTimes((prevRemainingTimes) => {\r\n//                         const newRemainingTimes = [...prevRemainingTimes];\r\n//                         newRemainingTimes[index] = prevRemainingTimes[index] - 1;\r\n//                         return newRemainingTimes;\r\n//                     });\r\n//                 } else if (remainingTimes[index] === 0) {\r\n//                     // Délai écoulé\r\n//                     alert(\"Le temps imparti pour la question \" + (index + 1) + \" est écoulé !\");\r\n//                     setIsTimerActive((prevIsTimerActive) => {\r\n//                         const newIsTimerActive = [...prevIsTimerActive];\r\n//                         newIsTimerActive[index] = false;\r\n//                         return newIsTimerActive;\r\n//                     });\r\n//                     setIsQuestionLocked((prevIsQuestionLocked) => {\r\n//                         const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n//                         newIsQuestionLocked[index] = true;\r\n//                         return newIsQuestionLocked;\r\n//                     });\r\n//                 }\r\n//             }, 1000);\r\n//         });\r\n\r\n//         return () => intervals.forEach((interval) => clearInterval(interval));\r\n//     }, [remainingTimes, isTimerActive]);\r\n\r\n//     const handleStartTimer = (questionIndex) => {\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = true;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         // Focus sur le champ de réponse\r\n//     };\r\n\r\n//     const handleSubmit = (e, questionIndex) => {\r\n//         e.preventDefault();\r\n\r\n//         const answer = e.target.answer.value;\r\n\r\n//         // Envoyer la réponse au serveur ou l'enregistrer localement\r\n\r\n//         // Mettre à jour la liste des réponses\r\n//         setAnswers([...answers, { questionIndex, answer }]);\r\n\r\n//         // Réinitialiser le chronomètre\r\n//         setRemainingTimes((prevRemainingTimes) => {\r\n//             const newRemainingTimes = [...prevRemainingTimes];\r\n//             newRemainingTimes[questionIndex] = 60;\r\n//             return newRemainingTimes;\r\n//         });\r\n\r\n//         // Vider le champ de réponse\r\n//         e.target.answer.value = '';\r\n\r\n//         alert(\"Votre réponse à la question \" + (questionIndex + 1) + \" a été soumise !\");\r\n//         setIsTimerActive((prevIsTimerActive) => {\r\n//             const newIsTimerActive = [...prevIsTimerActive];\r\n//             newIsTimerActive[questionIndex] = false;\r\n//             return newIsTimerActive;\r\n//         });\r\n//         setIsQuestionLocked((prevIsQuestionLocked) => {\r\n//             const newIsQuestionLocked = [...prevIsQuestionLocked];\r\n//             newIsQuestionLocked[questionIndex] = true;\r\n//             return newIsQuestionLocked;\r\n//         });\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"question-page\">\r\n//             {questions.map((question, index) => (\r\n//                 <div key={question.texte} className=\"question-container\">\r\n//                     <h2 className='texte'>{question.texte}</h2>\r\n//                     <p className='question'>{question.description}</p>\r\n//                     <p className=\"time-remaining\">Temps restant : {remainingTimes[index]} secondes</p>\r\n//                     <button\r\n//                         onClick={() => handleStartTimer(index)}\r\n//                         className=\"start-button\"\r\n//                         disabled={isQuestionLocked[index]}\r\n//                     >\r\n//                         Démarrer le chronomètre\r\n//                     </button>\r\n//                     {isTimerActive[index] && !isQuestionLocked[index] && (\r\n//                         <form onSubmit={(e) => handleSubmit(e, index)}>\r\n//                             <label htmlFor=\"answer\">Votre réponse : </label>\r\n//                             <textarea\r\n//                                 id=\"answer\"\r\n//                                 name=\"answer\"\r\n//                                 ref={questionRefs.current[index]}\r\n//                                 className=\"answer-field\"\r\n//                                 disabled={isQuestionLocked[index]}\r\n//                             />\r\n//                             <button type=\"submit\" className=\"submit-button\">Valider</button>\r\n//                         </form>\r\n//                     )}\r\n//                 </div>\r\n//             ))}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default QuestionPage;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n// Exemple de composant Questions\r\nconst QuestionsComponent = () => {\r\n    const [questions, setQuestions] = useState([]); // Liste des questions\r\n    const [answers, setAnswers] = useState({}); // Réponses de l'utilisateur\r\n    const [timer, setTimer] = useState(7200); // Chronomètre en secondes (2 heures)\r\n\r\n    // Fonction pour charger les questions depuis la base de données (simulé ici)\r\n    const loadQuestions = async () => {\r\n        // Remplacez cette partie par votre logique de récupération des questions depuis MongoDB\r\n        const fetchedQuestions = await fetchQuestionsFromDatabase();\r\n        setQuestions(fetchedQuestions);\r\n    };\r\n\r\n    // Fonction pour enregistrer les réponses dans la base de données (simulé ici)\r\n    const saveAnswersToDatabase = async () => {\r\n        // Remplacez cette partie par votre logique d'enregistrement des réponses dans MongoDB\r\n        await saveAnswersToMongoDB(answers);\r\n    };\r\n\r\n    // Fonction pour gérer le chronomètre\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTimer((prevTimer) => prevTimer - 1);\r\n        }, 1000);\r\n\r\n        // Lorsque le chronomètre atteint 0, enregistrez les réponses\r\n        if (timer === 0) {\r\n            saveAnswersToDatabase();\r\n        }\r\n\r\n        return () => clearInterval(interval);\r\n    }, [timer]);\r\n\r\n    // Fonction pour gérer la saisie des réponses\r\n    const handleAnswerChange = (questionId, answer) => {\r\n        setAnswers((prevAnswers) => ({ ...prevAnswers, [questionId]: answer }));\r\n    };\r\n\r\n    // Chargez les questions au montage du composant\r\n    useEffect(() => {\r\n        loadQuestions();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Questions</h1>\r\n            <p>Temps restant : {Math.floor(timer / 60)} minutes {timer % 60} secondes</p>\r\n            {questions.map((question) => (\r\n                <div key={question.id}>\r\n                    <p>{question.text}</p>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={answers[question.id] || ''}\r\n                        onChange={(e) => handleAnswerChange(question.id, e.target.value)}\r\n                    />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuestionsComponent;\r\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}